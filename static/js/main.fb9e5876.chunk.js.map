{"version":3,"sources":["components/LoadPointData.js","components/LoadPointDataFcst.js","components/DisplayChart.js","components/UI/LocationPicker.js","components/UI/PlantingDatePicker.js","components/UI/GddBaseSelect.js","components/UI/GddTargetSelect.js","components/UI/GddTargetSelectEnable.js","components/UI/FreezeThreshSelect.js","components/UI/FreezeThreshSelectEnable.js","components/UI/UserInput.js","components/VarPopover.js","components/HelpToolContent.js","components/HelpToolPopover.js","components/processWeatherData.js","components/ToolContents.js","components/App.js","index.js"],"names":["protocol","window","location","LoadPointData","param","fetch","then","r","json","data","propTypes","PropTypes","object","isRequired","LoadPointDataFcst","HighchartsMore","Highcharts","Exporting","ExportData","DisplayCharts","props","i","countOfThisDate","plantingYear","chartWeatherData","dates_for_summary","split","fcstIsShowing","dates_selected_year","includes","firstFcstDate","idxOfFirstFcstDate","indexOf","countItemInArray","item","arr","count","length","dataForFirstFreeze","datesOfFirstFreeze_15yr","push","x","moment","utc","valueOf","y","color","dataForLastFreeze","datesOfLastFreeze_15yr","tooltipFormatter","header","dateFormat","this","tips","points","series","name","toFixed","point","low","high","targetInfo","year","locInfo","slice","crosshair_zindex","gdd_ytd_por_min","plotLines","targetIsEnabled","idxOfTarget","idxOfMaxObsValue","result","label","gdd_ytd_selected","Math","max","findIndex","number","gdd_ytd_15yr_ave","getTargetDate","text","width","zIndex","value","containerProps","style","height","highcharts","options","plotOptions","line","animation","type","lineWidth","marker","symbol","states","hover","enabled","halo","size","exporting","menuItemDefinitions","downloadCSV","downloadXLS","buttons","contextButton","menuItems","chart","marginTop","backgroundColor","credits","href","title","subtitle","tooltip","useHtml","shared","borderColor","borderWidth","borderRadius","shadow","xDateFormat","positioner","shape","crosshairs","snap","formatter","legend","align","symbolRadius","floating","verticalAlign","layout","xAxis","startOnTick","endOnTick","min","view","labels","dateTimeLabelFormats","day","week","month","yAxis","gridZIndex","visible","freezeIsEnabled","opposite","map","index","fillColor","lineColor","radius","showInLegend","gdd_ytd_30yr_nor","gdd_ytd_por_max","fillOpacity","pointWidth","enableMouseTracking","concat","dataIsLoading","Backdrop","invisible","open","CircularProgress","jQuery","URL_google_api","LocationPicker","initMapDialog","state","mapDialogInitialized","google","CsfToolLocationDialog","map_dialog","ev","context","locations_picker","all_locations","selected_picker","selected_location","handleOutput","setState","openMap","locations","selected","handleScriptsLoaded","googleMapsReady","locationDialogReady","handleLocationDialogLoad","console","log","handleGoogleMapsLoad","className","isHydrating","src","onLoad","Button","variant","onClick","Component","withStyles","theme","utils","DateFnsUtils","disableToolbar","views","format","minDate","maxDate","PopoverProps","left","top","margin","id","onChange","onchange","autoOk","InputProps","readOnly","KeyboardButtonProps","getLabel","v","root","display","flexWrap","formControl","minWidth","menuPaper","maxHeight","green","classes","autoComplete","FormControl","InputLabel","htmlFor","Select","MenuProps","paper","inputProps","values","MenuItem","maxWidth","TextField","fullWidth","disabled","GreenCheckbox","checked","Checkbox","GddTargetSelectEnable","FormControlLabel","control","FreezeThreshSelectEnable","UserInput","Box","paddingTop","border","Grid","container","direction","spacing","justify","alignItems","Typography","marginRight","marginLeft","namespace","onchange_locationPicker","onchange_view","onchange_plantingDate","gdd_list","onchange_locInfo","onchange_targetIsEnabled","onchange_freezeIsEnabled","React","VarPopover","anchorEl","handleClick","event","currentTarget","handleClose","Boolean","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","content","typography","HelpMain","padding","bgcolor","target","rel","HelpToolPopover","IconButton","aria-label","menuButton","processWeatherData","dataDailyExtremes","lastObsDate","plantingDate","gddBase","freezeThreshold","results","sum","calcGdd","mx","mn","b","limits","mx_lim","mn_lim","zeroDateMMDD","subtract","base","calcGddAcc","d","shiftDataBackOneDay","plantingDateFormatted","selectedYear","dataFiltered","filter","array","getSelectedYearData","currentYear","isLeapYearSelected","isLeapYear","distinctDates","average","reduce","p","c","isOnDate","isNotCurrentYear","isAfterPlantingDate","Set","sort","forEach","dataToSummarizeForDate","parseInt","getExtremesAndAverageData","seasonStartDates","idxOfDate","springFreezes","fallFreezes","years","dates","isBelowFreezeThreshold","toString","getFreezeData","getFirstFcstDate","ToolContents","addOneDayToStringDate","add","subtractOneDayToStringDate","loadAllData","handleDataIsLoadingChange","setTimeout","getAcisParamsObs","response_obs","data_obs","last_obs_date","getAcisParamsFcst","response_fcst","data_fcst","handleDataChange","method","headers","body","JSON","stringify","join","sdate","replaceAll","handleSelectedLocationChange","handleLocationInfoChange","e","k","prevState","handleLocationPickerOutput","l","s","l_new","hasOwnProperty","defaultLocation","pointData","handleViewChange","handlePlantingDateChange","e_new","handleTargetIsEnabledChange","handleFreezeIsEnabledChange","defaultLocations","ls","prevProps","set","display_DisplayChart","display_UserInput","display_VarPopover","DisplayChart","md","Hidden","mdUp","smDown","createMuiTheme","shadows","Array","fill","palette","primary","main","alternativeTextColor","overrides","MUIDataTableBodyRow","body2","fontSize","App","withTheme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb9e5876.chunk.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//import React from 'react';\n//import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst protocol = window.location.protocol;\n\nconst LoadPointData = ({param}) => {\n        return fetch(`${protocol}//grid2.rcc-acis.org/GridData`,param)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data : null;\n             });\n}\n\nLoadPointData.propTypes = {\n  param: PropTypes.object.isRequired,\n};\n\nexport default LoadPointData;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport PropTypes from 'prop-types';\n\nconst protocol = window.location.protocol;\n\nconst LoadPointDataFcst = ({param}) => {\n        return fetch(`${protocol}//hrly.nrcc.cornell.edu/locHrly`,param)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data : null;\n             });\n}\n\nLoadPointDataFcst.propTypes = {\n  param: PropTypes.object.isRequired,\n};\n\nexport default LoadPointDataFcst;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport HighchartsMore from 'highcharts/highcharts-more'\nimport Exporting from 'highcharts/modules/exporting'\nimport ExportData from 'highcharts/modules/export-data'\nimport HighchartsReact from 'highcharts-react-official';\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core//CircularProgress';\nimport Backdrop from '@material-ui/core//Backdrop';\n\nHighchartsMore(Highcharts)\nExporting(Highcharts)\nExportData(Highcharts)\nwindow.Highcharts = Highcharts;\n\nconst DisplayCharts = (props) => {\n        const plantingYear = props.chartWeatherData.dates_for_summary[0].split('-')[0]\n        const fcstIsShowing = props.chartWeatherData.dates_selected_year.includes(props.chartWeatherData.firstFcstDate)\n        const idxOfFirstFcstDate = props.chartWeatherData.dates_selected_year.indexOf(props.chartWeatherData.firstFcstDate)\n        //if (props.chartWeatherData.dates_selected_year.includes(props.chartWeatherData.firstFcstDate)) {\n        //    const idxOfFirstFcstDate = props.chartWeatherData.dates_selected_year.indexOf(props.chartWeatherData.firstFcstDate)\n        //} else {\n        //    const idxOfFirstFcstDate = null\n        //}\n\n        // function to count item in array\n        const countItemInArray = (item,arr) => {\n            let i\n            let count = 0;\n            for(i = 0; i < arr.length; ++i){\n                if(arr[i] === item)\n                    count++;\n            }\n            return count\n        }\n\n        // data for first freeze\n        let dataForFirstFreeze = [];\n        let i, countOfThisDate;\n        for (i=0; i<props.chartWeatherData.datesOfFirstFreeze_15yr.length; i++) {\n            countOfThisDate = countItemInArray(props.chartWeatherData.datesOfFirstFreeze_15yr[i],props.chartWeatherData.datesOfFirstFreeze_15yr)\n            dataForFirstFreeze.push( {x: moment.utc(props.chartWeatherData.datesOfFirstFreeze_15yr[i],'YYYY-MM-DD').valueOf(), y: countOfThisDate, color: 'rgb(0,0,255)'} )\n        }\n\n        // data for last freeze\n        let dataForLastFreeze = [];\n        for (i=0; i<props.chartWeatherData.datesOfLastFreeze_15yr.length; i++) {\n            countOfThisDate = countItemInArray(props.chartWeatherData.datesOfLastFreeze_15yr[i],props.chartWeatherData.datesOfLastFreeze_15yr)\n            dataForLastFreeze.push( {x: moment.utc(props.chartWeatherData.datesOfLastFreeze_15yr[i],'YYYY-MM-DD').valueOf(), y: countOfThisDate, color: 'rgb(0,0,255)'} )\n        }\n\n        function tooltipFormatter() {\n            var i, item;\n            var header = '<span style=\"font-size:14px;font-weight:bold;text-align:center\">' + Highcharts.dateFormat('%b %d, %Y', this.x) + '</span>';\n            var tips = \"\";\n            for (i=0; i<this.points.length; i++) {\n                item = this.points[i];\n                //if ( (item.series.name !== \"POR Max\") && (item.series.name !== \"POR Min\") && (item.series.name !== \"POR\") ) {\n                if ( item.series.name !== \"Period of Record\" ) {\n                    tips += '<br/>' + item.y.toFixed(0) + ' : <span style=\"color:'+item.color+';font-size:12px;font-weight:bold\">' +  item.series.name + '</span>';\n                }\n                if (item.series.name === \"Period of Record\") {\n                    tips += '<br/>' + item.point.low.toFixed(0) + '-' + item.point.high.toFixed(0) + ' : <span font-size:12px;\">Period of Record</span>';\n                }\n            }\n            return header + tips;\n        }\n\n        let year = props.locInfo['planting_date'].slice(6)\n        let crosshair_zindex = (props.chartWeatherData.gdd_ytd_por_min[-62]<100) ? 4 : 1;\n\n        // find date and create label for plotLine associated with user's provided target GDD value\n        const getTargetDate = () => {\n            let idxOfTarget\n            let idxOfMaxObsValue\n            let result\n            let label\n            if (props.chartWeatherData.gdd_ytd_selected.length>0) {\n              if (Math.max(...props.chartWeatherData.gdd_ytd_selected)>=props.locInfo['gdd_target']) {\n                idxOfTarget=props.chartWeatherData.gdd_ytd_selected.findIndex(function(number) {\n                  return number > props.locInfo['gdd_target'];\n                });\n                result = moment.utc(props.chartWeatherData.dates_selected_year[idxOfTarget], 'YYYY-MM-DD').valueOf()\n                label = 'Target Observed'\n              } else {\n                idxOfMaxObsValue = props.chartWeatherData.gdd_ytd_selected.indexOf( Math.max(...props.chartWeatherData.gdd_ytd_selected) )\n                idxOfTarget=props.chartWeatherData.gdd_ytd_15yr_ave.findIndex(function(number) {\n                  return (number+props.chartWeatherData.gdd_ytd_selected[idxOfMaxObsValue]-props.chartWeatherData.gdd_ytd_15yr_ave[idxOfMaxObsValue]) > props.locInfo['gdd_target'];\n                });\n                result = moment.utc(props.chartWeatherData.dates_for_summary[idxOfTarget], 'YYYY-MM-DD').valueOf()\n                label = 'Target Fcst'\n              }\n            } else {\n              idxOfTarget=props.chartWeatherData.gdd_ytd_15yr_ave.findIndex(function(number) {\n                return number > props.locInfo['gdd_target'];\n              });\n              result = moment.utc(props.chartWeatherData.dates_for_summary[idxOfTarget], 'YYYY-MM-DD').valueOf()\n              label = 'Target Fcst'\n            }\n            return {'value':result, 'label':label}\n        }\n\n        // construct plotLine for user's provided target GDD value\n        let plotLines = []\n        let targetInfo\n        if (props.targetIsEnabled) {\n            targetInfo = getTargetDate()\n            plotLines.push({ label: {text:targetInfo.label, y:30}, color: '#4caf50', width: 4, zIndex: 6, value: targetInfo.value })\n        }\n\n        const genChartConfig = () => {\n              return {\n                 plotOptions: {\n                     line: {\n                         animation: true,\n                     },\n                     series: {\n                         type: 'line',\n                         animation: false,\n                         lineWidth: 4,\n                         marker: {\n                             symbol: 'circle',\n                         },\n                         states: {\n                             hover: {\n                                 enabled: true,\n                                 halo: {\n                                     size: 0\n                                 }\n                             }\n                         }\n                     }\n                 },\n                 exporting: {\n                   menuItemDefinitions: {\n                     // Custom definition\n                     downloadCSV: {\n                       text: 'Download as CSV table'\n                     },\n                     downloadXLS: {\n                       text: 'Download as XLS table'\n                     }\n                   },\n                   buttons: {\n                     contextButton: {\n                       menuItems: [\n                         \"printChart\",\n                         \"separator\",\n                         \"downloadPNG\",\n                         \"downloadJPEG\",\n                         \"downloadPDF\",\n                         \"downloadSVG\",\n                         \"separator\",\n                         \"downloadCSV\",\n                         \"downloadXLS\",\n               //              \"viewData\",\n                         \"openInCloud\"\n                       ]\n                     }\n                   }\n                 },\n                 chart: { marginTop: 60, backgroundColor: null },\n                 credits: {\n                   href: \"http://www.rcc-acis.org\",\n                   text: \"Powered by ACIS\"\n                 },\n                 title: {\n                     text: year+' Cumulative Growing Degree Days (Base '+props.locInfo['gdd_base']+')'\n                 },\n                 subtitle: {\n                     text: props.locInfo['address'],\n                     style:{\"font-size\":\"14px\",color:\"#000000\"},\n                 },\n                 tooltip: { useHtml:true, shared:true, borderColor:\"#000000\", borderWidth:2, borderRadius:8, shadow:false, backgroundColor:\"#ffffff\",\n                   xDateFormat:\"%b %d, %Y\", positioner:function(){return {x:80, y:60}}, shape: 'rect',\n                   crosshairs: { width:1, color:\"#ff0000\", snap:true, zIndex: crosshair_zindex }, formatter:tooltipFormatter },\n                 legend: { align: 'left', symbolRadius: 0, floating: true, verticalAlign: 'top', layout: 'vertical', x: 65, y: 50 },\n                 xAxis: {\n                     type: 'datetime',\n                     startOnTick: false,\n                     endOnTick: false,\n                     min: moment.utc(props.locInfo['planting_date'],'MM/DD/YYYY').valueOf(),\n                     max: props.view==='season-outlook' ? moment.utc(plantingYear+'-12-31','YYYY-MM-DD').valueOf() : moment.utc(props.chartWeatherData.dates_selected_year[props.chartWeatherData.dates_selected_year.length-1],'YYYY-MM-DD').valueOf(),\n                     labels: { align: 'center', x: 0, y: 20 },\n                     plotLines: plotLines,\n                     dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n                 },\n                 yAxis: [\n                     { title:{ text:'Cumulative GDD', style:{\"font-size\":\"14px\", color:\"#000000\"}}, min: 0,\n                         gridZIndex:1, labels:{style:{color:\"#000000\"}}},\n                     { title:{ text:'First/Last Freeze (# yrs)', align:'low', style:{\"font-size\":\"14px\", color:\"#0000FF\"}}, min: 0, max: 8,\n                         visible: props.freezeIsEnabled,\n                     labels:{style:{color:\"#0000FF\"}}, opposite: true },\n                 ],\n                 series: [{\n                     name: \"Season to Date\",\n                     data: props.chartWeatherData.gdd_ytd_selected.slice(0,idxOfFirstFcstDate).map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_selected_year[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 24, lineWidth: 2, color: \"#00dd00\", shadow: false,\n                     marker: { enabled: true, fillColor: \"#00dd00\", lineWidth: 2, lineColor: \"#00dd00\", radius:2, symbol:\"circle\" }\n                   },{\n                     name: \"6 Day Forecast\",\n                     data: props.chartWeatherData.gdd_ytd_selected.slice(idxOfFirstFcstDate).map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_selected_year[idxOfFirstFcstDate+index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     showInLegend: fcstIsShowing,\n                     type: \"line\", zIndex: 24, lineWidth: 2, color: \"#dd0000\", shadow: false,\n                     marker: { enabled: true, fillColor: \"#dd0000\", lineWidth: 2, lineColor: \"#dd0000\", radius:2, symbol:\"circle\" }\n                   },{\n                     name: \"15 Year Average\",\n                     data: props.chartWeatherData.gdd_ytd_15yr_ave.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 23, lineWidth: 2, color: \"#0000ff\",\n                     marker: { enabled: false, states: { hover: { enabled: false }} }\n                   },{\n                     name: '30 Year \"Normal\"',\n                     data: props.chartWeatherData.gdd_ytd_30yr_nor.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 22, lineWidth: 2, color: \"#B041FF\",\n                     marker: { enabled: false, states: { hover: { enabled: false }} }\n                   },{\n                     name: \"Period of Record\",\n                     data: props.chartWeatherData.gdd_ytd_por_min.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,props.chartWeatherData.gdd_ytd_por_min[index], props.chartWeatherData.gdd_ytd_por_max[index]]\n                     }),\n                     type: \"arearange\", showInLegend: true, zIndex: 10, lineWidth: 2, color: \"#444444\", fillColor: \"#eeeeee\", fillOpacity: 0.1,\n                     marker : {enabled: false, states: { hover: { enabled: false }}, symbol: 'square', lineWidth: 2, lineColor: '#444444', radius: 12 }\n                   },{\n                     name: 'First/Last Freezes (last 15 yrs)', type: 'column', pointWidth: 1, borderWidth: 0,\n                     zIndex: props.view==='season-outlook' ? 1 : 25,\n                     visible: props.freezeIsEnabled,\n                     yAxis: 1,\n                     showInLegend: props.freezeIsEnabled,\n                     enableMouseTracking: false,\n                     data: dataForLastFreeze.concat(dataForFirstFreeze),\n                   }\n                 ],\n              }\n            }\n\n    return(\n\n      <>\n        <HighchartsReact\n          containerProps={{ style: { height: \"100%\" } }}\n          highcharts={Highcharts}\n          options={genChartConfig()}\n          //callback={afterRender}\n        />\n\n        {props.dataIsLoading &&\n          <Backdrop\n            style={{zIndex:1000}}\n            invisible={true}\n            //open={!props.values}\n            open={props.dataIsLoading}\n          >\n            <CircularProgress size={200} color=\"primary\"/>\n          </Backdrop>\n        }\n      </>\n\n    );\n\n\n}\n\nDisplayCharts.propTypes = {\n  locInfo: PropTypes.object.isRequired,\n  freezeIsEnabled: PropTypes.bool.isRequired,\n  targetIsEnabled: PropTypes.bool.isRequired,\n  chartWeatherData: PropTypes.object.isRequired,\n  view: PropTypes.string.isRequired,\n  dataIsLoading: PropTypes.bool.isRequired,\n};\n\nexport default DisplayCharts;\n","///////////////////////////////////////////////////////////////////////////////\n//\n// Climate Smart Farming Growing Degree Day Calculator\n// Copyright (c) 2018 Cornell Institute for Climate Smart Solutions\n// All Rights Reserved\n//\n// This software is published under the provisions of the GNU General Public\n// License <http://www.gnu.org/licenses/>. A text copy of the license can be\n// found in the file 'LICENSE' included with this software.\n//\n// A text copy of the copyright notice, licensing conditions and disclaimers\n// is available in the file 'COPYRIGHT' included with this software.\n//\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport ScriptTag from 'react-script-tag';\n//import Icon from 'react-icons-kit';\n//import { mapMarker } from 'react-icons-kit/fa/mapMarker';       \nimport jQuery from 'jquery';\nimport 'jquery-ui/themes/base/core.css';\nimport 'jquery-ui/themes/base/theme.css';\nimport 'jquery-ui/themes/base/button.css';\nimport 'jquery-ui/themes/base/dialog.css';\nimport 'jquery-ui/ui/core';\nimport 'jquery-ui/ui/widgets/button';\nimport 'jquery-ui/ui/widgets/dialog';\nimport '../../styles/LocationPicker.css';\nimport '../../styles/location-dialog.css';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nwindow.jQuery = jQuery;\n\nconst HOST = 'https://maps.google.com/maps/api/js';\nconst KEY = 'AIzaSyDv5pQYe9kRbolVUt0o8XSXSQl4g8BHrrQ';\nconst URL_google_api = `${HOST}?key=${KEY}`;\n//const URL_location_dialog = 'http://tools.climatesmartfarming.org/gddtool_react_v3/js/location-dialog-min.js'\n//const URL_location_dialog = 'https://cicss.github.io/csf-location-picker-react/assets/location-dialog-min.js'\nconst URL_location_dialog = 'https://nrcc-cornell.github.io/csf-gddtool-v4/js/location-dialog-min.js'\n//const URL_location_dialog = 'https://nrcc-cornell.github.io/csf-location-picker-react/js/location-dialog-min.js'\n\nclass LocationPicker extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      googleMapsReady: (window.google) ? true : false,\n      locationDialogReady: false,\n      mapDialogInitialized: false\n    }\n  }\n\n  initMapDialog = () => {\n    if (!this.state.mapDialogInitialized) {\n      var options = { width:600, height:500, google:window.google };\n      jQuery(\".csftool-location-dialog\").CsfToolLocationDialog(options);\n      this.map_dialog = jQuery(\".csftool-location-dialog\").CsfToolLocationDialog();\n      this.map_dialog(\"bind\", \"close\", (ev, context) => {\n        let locations_picker = context.all_locations\n        let selected_picker = context.selected_location\n        this.props.handleOutput(locations_picker,selected_picker);\n        //console.log(locations_picker)\n        //console.log(selected_picker)\n      });\n      this.setState({\n        mapDialogInitialized: true\n      })\n    }\n  }\n\n  openMap = () => {\n    this.map_dialog(\"locations\", this.props.locations);\n    this.map_dialog(\"open\", this.props.selected);\n  }\n\n  handleScriptsLoaded = () => {\n    if (this.state.googleMapsReady && this.state.locationDialogReady) {\n      this.initMapDialog();\n    }\n  }\n\n  handleLocationDialogLoad = () => {\n    console.log('location dialog script loaded')\n    this.setState({\n      locationDialogReady: true\n    })\n    this.handleScriptsLoaded();\n  }\n\n  handleGoogleMapsLoad = () => {\n    console.log('google maps script loaded')\n    this.setState({\n      googleMapsReady: true\n    })\n    this.handleScriptsLoaded();\n  }\n\n  render() {\n        return (\n            <div className=\"location-input-div\">\n              {!this.state.googleMapsReady &&\n                <ScriptTag isHydrating={false} type=\"text/javascript\" src={URL_google_api} onLoad={this.handleGoogleMapsLoad} />\n              }\n              {!this.state.locationDialogReady &&\n                <ScriptTag isHydrating={false} type=\"text/javascript\" src={URL_location_dialog} onLoad={this.handleLocationDialogLoad} />\n              }\n              {this.state.mapDialogInitialized &&\n                <Button\n                  variant=\"contained\" color=\"primary\" size=\"small\"\n                  onClick={this.openMap}\n                >\n                  Edit\n                </Button>\n              }\n            </div>\n        )\n  }\n\n};\n\nLocationPicker.propTypes = {\n  namespace: PropTypes.string.isRequired,\n  locations: PropTypes.object.isRequired,\n  selected: PropTypes.string.isRequired,\n  handleOutput: PropTypes.func.isRequired,\n};\n\nexport default LocationPicker;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport 'date-fns';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst styles = theme => ({\n  //root: {\n  //  display: 'flex',\n  //  flexWrap: 'wrap',\n  //},\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst PlantingDatePicker = (props) => {\n        //const { classes } = props;\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              views={[\"date\"]}\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              minDate=\"01/01/1980\"\n              maxDate=\"12/31/2022\"\n              PopoverProps={{style: {...{left: '180px', top: '-140px'}}}}\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              label=\"Planting Date\"\n              value={props.value}\n              onChange={props.onchange}\n              autoOk={true}\n              InputProps={{ readOnly: true }}\n              KeyboardButtonProps={{\n                'aria-label': 'change planting date',\n              }}\n              style={{ width: 160 }}\n            />\n          </MuiPickersUtilsProvider>\n        );\n}\n\nPlantingDatePicker.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(PlantingDatePicker);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport green from '@material-ui/core/colors/green';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 160,\n  },\n  menuPaper: {\n    maxHeight: 190,\n    backgroundColor: green[600],\n    color: '#ffffff',\n  }\n});\n\nconst getLabel = (v) => {\n  return v+'°F'\n}\n\nconst GddBaseSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"gdd_base\">GDD Base</InputLabel>\n              <Select\n                value={props.value}\n                onChange={props.onchange}\n                margin='normal'\n                MenuProps={{ classes: { paper: classes.menuPaper } }}\n                inputProps={{\n                  name: 'gdd_base',\n                  id: 'gdd_base',\n                }}\n              >\n                {props.values &&\n                  props.values.map((v,i) => (\n                    <MenuItem key={i} value={v}>{getLabel(v)}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>\n          </form>\n        );\n}\n\nGddBaseSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  values: PropTypes.array.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(GddBaseSelect);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 100,\n    maxWidth: 120,\n  },\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst GddTargetSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <TextField\n                fullWidth\n                color='primary'\n                label='GDD Target'\n                margin='none'\n                value={props.value}\n                disabled={!props.enabled}\n                onChange={props.onchange}\n                inputProps={{\n                  name: 'gdd_target',\n                  id: 'gdd_target',\n                }}\n              />\n            </FormControl>\n          </form>\n        );\n}\n\nGddTargetSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(GddTargetSelect);\n","///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[800],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nclass GddTargetSelectEnable extends Component {\n\n  render() {\n        return (\n\n          <FormControlLabel\n            control={<GreenCheckbox checked={this.props.value} onChange={this.props.onchange} name=\"enableTarget\" />}\n            label=\"\"\n          />\n\n        )\n  }\n\n};\n\nGddTargetSelectEnable.propTypes = {\n  value: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default GddTargetSelectEnable;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 100,\n    maxWidth: 120,\n  },\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst FreezeThreshSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <TextField\n                fullWidth\n                color='primary'\n                label='Frost Temp (°F)'\n                margin='none'\n                value={props.value}\n                disabled={!props.enabled}\n                onChange={props.onchange}\n                inputProps={{\n                  name: 'freeze_threshold',\n                  id: 'freeze_threshold',\n                }}\n              />\n            </FormControl>\n          </form>\n        );\n}\n\nFreezeThreshSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(FreezeThreshSelect);\n","///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[800],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nclass FreezeThreshSelectEnable extends Component {\n\n  render() {\n        return (\n\n          <FormControlLabel\n            control={<GreenCheckbox checked={this.props.value} onChange={this.props.onchange} name=\"enableTarget\" />}\n          />\n\n        )\n  }\n\n};\n\nFreezeThreshSelectEnable.propTypes = {\n  value: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default FreezeThreshSelectEnable;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n//import red from '@material-ui/core/colors/red';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Components\nimport LocationPicker from './LocationPicker';\nimport PlantingDatePicker from './PlantingDatePicker';\nimport GddBaseSelect from './GddBaseSelect';\nimport GddTargetSelect from './GddTargetSelect';\nimport GddTargetSelectEnable from './GddTargetSelectEnable';\nimport FreezeThreshSelect from './FreezeThreshSelect';\nimport FreezeThreshSelectEnable from './FreezeThreshSelectEnable';\n\n//import StationPickerMap from '../../common/StationPickerMap';\n//import VarPicker from '../VarPicker';\n//import ScenarioPicker from '../ScenarioPicker';\n//import TimescalePicker from '../TimescalePicker';\n//import PeriodPicker from '../PeriodPicker';\n//import HelpUserPopover from '../HelpUserPopover';\n//import HelpUserContent from '../HelpUserContent';\n\n\nclass UserInput extends React.Component {\n  //constructor(props) {\n  //    super(props);\n  //}\n\n  render() {\n    //const { classes } = this.props;\n\n    return (\n      <Box paddingTop={1} border={2} borderRadius={4} borderColor=\"primary.main\">\n\n                    <Grid container item direction=\"column\" spacing={3}>\n\n                      <Grid container item direction=\"column\" spacing={0}>\n\n                      <Grid item container justify=\"center\" alignItems=\"center\">\n                          <Typography style={{ marginRight: 30, marginLeft: 30 }}>\n                              <b>Current Location:</b><br/>\n                              {this.props.locations[this.props.selected]['address']}\n                          </Typography>\n                      </Grid>\n\n                      <Grid item container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item>\n                          <LocationPicker\n                            namespace='CSF-GDDTOOL'\n                            locations={this.props.locations}\n                            selected={this.props.selected}\n                            handleOutput={this.props.onchange_locationPicker}\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            variant={this.props.view==='summary' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                            disabled={true}\n                            onClick={() => this.props.onchange_view('summary')}\n                          >\n                            Summary\n                          </Button>\n                        </Grid>\n                      </Grid>\n\n                      </Grid>\n\n                      <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                        <Grid item>\n                          <PlantingDatePicker\n                            value={this.props.locations[this.props.selected]['planting_date']}\n                            onchange={this.props.onchange_plantingDate}\n                          />\n                        </Grid>\n\n                        <Grid item>\n                          <GddBaseSelect\n                            value={this.props.locations[this.props.selected]['gdd_base']}\n                            values={this.props.gdd_list}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n\n                        <Grid item container direction=\"row\" justify=\"center\" alignItems=\"flex-end\">\n                          <GddTargetSelectEnable\n                            value={this.props.targetIsEnabled}\n                            onchange={this.props.onchange_targetIsEnabled}\n                          />\n                          <GddTargetSelect\n                            value={this.props.locations[this.props.selected]['gdd_target']}\n                            enabled={this.props.targetIsEnabled}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n\n                        <Grid item container direction=\"row\" justify=\"center\" alignItems=\"flex-end\">\n                          <FreezeThreshSelectEnable\n                            value={this.props.freezeIsEnabled}\n                            onchange={this.props.onchange_freezeIsEnabled}\n                          />\n                          <FreezeThreshSelect\n                            value={this.props.locations[this.props.selected]['freeze_threshold']}\n                            enabled={this.props.freezeIsEnabled}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n                      </Grid>\n\n                    </Grid>\n\n      </Box>\n    );\n  }\n}\n\nUserInput.propTypes = {\n  locations: PropTypes.object.isRequired,\n  selected: PropTypes.string.isRequired,\n  view: PropTypes.string.isRequired,\n  targetIsEnabled: PropTypes.bool.isRequired,\n  freezeIsEnabled: PropTypes.bool.isRequired,\n  gdd_list: PropTypes.array.isRequired,\n  onchange_locationPicker: PropTypes.func.isRequired,\n  onchange_view: PropTypes.func.isRequired,\n  onchange_plantingDate: PropTypes.func.isRequired,\n  onchange_locInfo: PropTypes.func.isRequired,\n  onchange_targetIsEnabled: PropTypes.func.isRequired,\n  onchange_freezeIsEnabled: PropTypes.func.isRequired,\n};\n\nexport default UserInput;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\n\nconst styles = theme => ({\n  typography: {\n    //margin: theme.spacing.unit * 2,\n    margin: theme.spacing(2),\n  },\n});\n\nclass VarPopover extends React.Component {\n  state = {\n    anchorEl: null,\n  };\n\n  handleClick = event => {\n    this.setState({\n      anchorEl: event.currentTarget,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      anchorEl: null,\n    });\n  };\n\n  render() {\n    const { anchorEl } = this.state;\n    const open = Boolean(anchorEl);\n\n    return (\n      <div>\n        <Button\n          variant=\"text\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={this.handleClick}\n        >\n          <ExpandMore />\n          Select chart details\n        </Button>\n        <Popover\n          id=\"simple-popper\"\n          open={open}\n          anchorEl={anchorEl}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'left',\n          }}\n        >\n          {this.props.content}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nVarPopover.propTypes = {\n  content: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(VarPopover);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\n//import PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst HelpMain = () => {\n        return (\n            <Box maxWidth={800} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n               <h2>Data Sources and methods</h2>\n               <h4><br/>&bull; ABOUT THE GROWING DEGREE DAY CALCULATOR</h4>\n               <p>\n               This tool plots Growing Degree Days (GDD), also called Growing Degree Units (GDUs), which measure heat accumulation in order to predict plant and insect development. In a stress-free environment, the development rate of a plant is dependent on temperature. Using the expected temperature of the summer season, based on previous years, this tool can help predict the best days to plant, harvest, and fertilize.\n               </p>\n               <p>\n               GDDs are calculated by taking the average of the daily maximum and minimum air temperature, and then subtracting a base temperature. The base temperature is the lowest temperature at which a crop will grow.\n               </p>\n               <h4><br/>&bull; COMMON BASE TEMPERATURES USED FOR GDD CALCULATION</h4>\n               <p>\n               50°F is the most common base for GDD calculations. However, a number of other bases are used depending on the lifecycle of the plant or insect of interest. Here is a small sample:\n               </p>\n               <ul>\n               <i>Plants</i>\n                   <li>50°F : corn, sorghum, soybeans, tomato</li>\n                   <li>46°F : sunflower, potato</li>\n                   <li>42°F : wheat, barley, rye, oats, flaxseed, lettuce, asparagus</li>\n               </ul>\n               <ul>\n               <i>Insects and Diseases</i>\n                   <li>52°F : Green Cloverworm</li>\n                   <li>50°F : Codling moth, Apple maggot</li>\n                   <li>48°F : Alfalfa weevil</li>\n                   <li>45°F : Corn rootworm, Oriental fruit moth</li>\n                   <li>43°F : Stalk Borer</li>\n                   <li>40°F : Onion maggot</li>\n                   <li>39°F : Cabbage maggot</li>\n                   <li>32°F : Apple scab</li>\n               </ul>\n               <h4>&bull; AIR TEMPERATURE DATA</h4>\n               <p>\n               The 2.5 x 2.5 mile gridded dataset of maximum and minimum air temperatures is produced daily for the Northeast United States by the <a href=\"http://www.nrcc.cornell.edu\" target=\"_blank\" rel=\"noopener noreferrer\">Northeast Regional Climate Center</a>, using methods described in Degaetano and Belcher (2007). These data are available for use through the Applied Climate Information System (<a href=\"http://www.rcc-acis.org\" target=\"_blank\" rel=\"noopener noreferrer\">ACIS</a>) web service.\n               </p>\n               <p>\n               Degaetano, A.T. and B.N. Belcher. (2007). Spatial Interpolation of Daily Maximum and Minimum Air Temperature Based on Meteorological Model Analyses and Independent Observations. Journal of Applied Meteorology and Climatology. 46.\n               </p>\n               <h4>&bull; FORECASTS AND OUTLOOKS</h4>\n               <p>\n               Six-day forecasts of daily temperature extremes obtained through the National Weather Service's National Digital Forecast Database (Glahn and Ruth, 2003) provide the means to produce 6-day GDD forecasts.\n               </p>\n               <p>\n               Seasonal outlooks are produced based on historical observations over recent decades. Minimum, maximum and average observed GDD accumulation over previous seasons provide expected guidelines and reference points based on what has occurred at a specific location in the past. \n               </p>\n               <p>\n               Glahn, H. R., and D. P. Ruth, 2003: The new digital forecast database of the National Weather Service. Bull. Amer. Meteor. Soc., 84, 195–201.\n               </p>\n            </Box>\n        );\n} \n\nexport {HelpMain};\n\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Popover from '@material-ui/core/Popover';\n\nconst styles = theme => ({\n  typography: {\n    margin: theme.spacing(2),\n  },\n  menuButton: {\n    marginRight: -60,\n    marginTop: -10,\n  },\n});\n\nclass HelpToolPopover extends React.Component {\n  state = {\n    anchorEl: null,\n  };\n\n  handleClick = event => {\n    this.setState({\n      anchorEl: event.currentTarget,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      anchorEl: null,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { anchorEl } = this.state;\n    const open = Boolean(anchorEl);\n\n    return (\n      <div>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"Help\"\n          className={classes.menuButton}\n          onClick={this.handleClick}\n        >\n          <HelpIcon />\n        </IconButton>\n        <Popover\n          id=\"simple-popper\"\n          open={open}\n          anchorEl={anchorEl}\n          onClick={this.handleClose}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          {this.props.content}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nHelpToolPopover.propTypes = {\n  classes: PropTypes.object.isRequired,\n  content: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(HelpToolPopover);\n","///\n///\n\nimport moment from 'moment';\n\nfunction shiftDataBackOneDay(data) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    function subtractOneDayFromDateString(d) {\n      let result = moment(d,'YYYY-MM-DD').subtract(1,'days').format('YYYY-MM-DD')\n      return result\n    }\n\n    let dataShifted = data.map(item => [subtractOneDayFromDateString(item[0]),item[1],item[2]])\n    // only return data starting with expected first date\n    return dataShifted.slice(1)\n}\n\nfunction calcGddAcc(data,plantingDate,gddBase) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    let sum\n\n    function calcGdd(mx,mn,b,limits=null) {\n        if (limits) {\n            let mx_lim = limits[0]\n            let mn_lim = limits[1]\n            mx = mx>mx_lim ? mx_lim : mx\n            mn = mn<mn_lim ? mn_lim : mn\n        }\n        return Math.max(...[((mx+mn)/2.) - b, 0])\n    }\n\n    //let startDateMMDD = plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    let zeroDateMMDD = moment(plantingDate,'MM/DD/YYYY').subtract(1,'day').format('MM-DD')\n    let base = (gddBase==='86/50') ? 50 : gddBase\n    let limits = (gddBase==='86/50') ? [86,50] : null\n    let dataAccSincePlantingDate = data.map((sum = 0, item =>\n      //[item[0], item[0].slice(5)===startDateMMDD ? sum = 0 : sum += calcGdd(item[1],item[2],base,limits)]\n      [item[0], item[0].slice(5)===zeroDateMMDD ? sum = 0 : sum += calcGdd(item[1],item[2],base,limits)]\n    ))\n    return dataAccSincePlantingDate\n}\n\nfunction getSelectedYearData(data,plantingDate) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var dataFiltered = null;\n    var dates_selected_year = null;\n    var gdd_ytd_selected = null;\n    var miss = -999;\n\n    // data arrays for selected year\n    function isWithinThisYear(value,index,array){\n        return (value[0].split('-')[0]===selectedYear && plantingDateFormatted<=value[0])\n    }\n    dataFiltered = data.filter(isWithinThisYear);\n    dates_selected_year = dataFiltered.map(x => x[0]);\n    gdd_ytd_selected = dataFiltered.map(x => x[1]!==miss ? x[1] : null);\n\n    return {\n        'dates_selected_year': dates_selected_year,\n        'gdd_ytd_selected': gdd_ytd_selected,\n    }\n}\n\nfunction getExtremesAndAverageData(data,plantingDate) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var currentYear = moment().format('YYYY')\n    let isLeapYearSelected = moment([selectedYear]).isLeapYear()\n    var dataFiltered = null;\n    var distinctDates = null;\n    var dates_for_summary = [];\n    var gdd_ytd_por_max = [];\n    var gdd_ytd_por_min = [];\n    var gdd_ytd_15yr_ave = [];\n    var gdd_ytd_30yr_nor = [];\n\n    let average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\n    function isAfterPlantingDateInHistoricalYears(value,index,array){\n        let isNotCurrentYear = value[0].split('-')[0]!==currentYear\n        let isAfterPlantingDate = plantingDateFormatted.slice(5)<=value[0].slice(5)\n        return (isNotCurrentYear && isAfterPlantingDate)\n    }\n    dataFiltered = data.filter(isAfterPlantingDateInHistoricalYears);\n    distinctDates = [...new Set(dataFiltered.map(x => x[0].slice(5)))]\n    distinctDates.sort()\n\n    function isOnDate(value,index,array){\n        return (value[0].slice(5)===this)\n    }\n    distinctDates.forEach((d) => {\n        if (d==='02-29' && !isLeapYearSelected) { return }\n        let dataForDate = dataFiltered.filter(isOnDate,d);\n        let dataToSummarizeForDate = dataForDate.map(x => x[1])\n        dates_for_summary.push(selectedYear+'-'+d)\n        gdd_ytd_por_max.push(Math.max(...dataToSummarizeForDate))\n        gdd_ytd_por_min.push(Math.min(...dataToSummarizeForDate))\n        gdd_ytd_15yr_ave.push(average(dataToSummarizeForDate.slice(-15)))\n        gdd_ytd_30yr_nor.push(average(dataToSummarizeForDate.slice(1991-parseInt(currentYear,10), 2020-parseInt(currentYear,10))))\n    })\n\n    return {\n        'dates_for_summary': dates_for_summary,\n        'gdd_ytd_por_max': gdd_ytd_por_max,\n        'gdd_ytd_por_min': gdd_ytd_por_min,\n        'gdd_ytd_15yr_ave': gdd_ytd_15yr_ave,\n        'gdd_ytd_30yr_nor': gdd_ytd_30yr_nor,\n    }\n}\n\nfunction getFreezeData(data,plantingDate,freezeThreshold) {\n    //\n    //\n\n    if (!freezeThreshold) {\n      return {\n        'datesOfFirstFreeze_15yr':[],\n        'datesOfLastFreeze_15yr':[],\n      }\n    }\n\n    //var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var currentYear = moment().format('YYYY')\n    let years = []\n    let seasonStartDates\n    let datesOfFirstFreeze_15yr = []\n    let datesOfLastFreeze_15yr = []\n\n    let dates = data.map(x => x[0])\n\n    // find last 15 years before current year\n    for (let i = 1; i < 16; i++) {\n      years.push(parseInt(currentYear,10)-i)\n    }\n\n    // season start dates\n    // Each year, we will find the last frost in Spring before this date, and the first frost in Fall after this date.\n    seasonStartDates = years.map(x => x.toString()+'-06-30')\n    seasonStartDates.sort()\n\n    // find first/last freezes\n    function isBelowFreezeThreshold(value,index,array){\n        return value[2]<=parseInt(freezeThreshold,10)\n    }\n    let idxOfDate\n    let springFreezes\n    let fallFreezes\n    seasonStartDates.forEach((d) => {\n      idxOfDate = dates.indexOf(d)\n      // get last freeze in Spring\n      springFreezes = data.slice(idxOfDate-180,idxOfDate).filter(isBelowFreezeThreshold)\n      if (springFreezes.length>0) {\n          datesOfLastFreeze_15yr.push(springFreezes.slice(-1)[0][0])\n      } else {\n          datesOfLastFreeze_15yr = []\n      }\n      // get first freeze in Fall\n      fallFreezes = data.slice(idxOfDate,idxOfDate+180).filter(isBelowFreezeThreshold)\n      if (fallFreezes.length>0) {\n          datesOfFirstFreeze_15yr.push(fallFreezes[0][0])\n      } else {\n          datesOfFirstFreeze_15yr = []\n      }\n    })\n\n    // only include data on or after planting date\n\n    // change years to selected year, for highcharts display\n    datesOfFirstFreeze_15yr = datesOfFirstFreeze_15yr.map(x => selectedYear+x.slice(4))\n    datesOfLastFreeze_15yr = datesOfLastFreeze_15yr.map(x => selectedYear+x.slice(4))\n\n    // highcharts prefers working with sorted data\n    if (datesOfFirstFreeze_15yr.length>0) { datesOfFirstFreeze_15yr.sort() };\n    if (datesOfLastFreeze_15yr.length>0) { datesOfLastFreeze_15yr.sort() };\n\n    return {\n        'datesOfFirstFreeze_15yr':datesOfFirstFreeze_15yr,\n        'datesOfLastFreeze_15yr':datesOfLastFreeze_15yr,\n    }\n}\n\nfunction getFirstFcstDate(lastObsDate) {\n    // ------------------------------------------------------------------------\n    // Since lastObsDate is provided as \"morning observation date\", this date\n    // serves as the firstFcstDate when dates are shifted to reflect the dates\n    // of heating occurrence (array dates for display are shifted in this manner).\n    // Therefore, we can simply assign lastObsDate as the firstFcstDate without\n    // any further date manipulation.\n    // ------------------------------------------------------------------------\n    return {\n      'firstFcstDate':lastObsDate\n    }\n}\n\nexport function processWeatherData(dataDailyExtremes,lastObsDate,plantingDate,gddBase,freezeThreshold) {\n\n    // ------------------------------------------------------------------------\n    //\n    //\n    //\n    // ------------------------------------------------------------------------\n\n    var results = {}\n\n    // Shift dates back one day, since data reflect morning observations, and we want GDD obs\n    // dates to reflect when the heating occurred.\n    let dataDailyExtremesShifted = shiftDataBackOneDay(dataDailyExtremes)\n\n    // calculate accumulated GDD data\n    let data = calcGddAcc(dataDailyExtremesShifted,plantingDate,gddBase)\n\n    results = {\n        ...results,\n        ...getSelectedYearData(data,plantingDate),\n        ...getExtremesAndAverageData(data,plantingDate),\n        ...getFreezeData(dataDailyExtremes,plantingDate,freezeThreshold),\n        ...getFirstFcstDate(lastObsDate),\n     }\n\n    return results\n    //return {\n    //    'dates_selected_year':,\n    //    'gdd_ytd_selected':,\n    //    'gdd_ytd_15yr_ave':,\n    //    'gdd_ytd_30yr_nor':,\n    //    'gdd_ytd_por_max':,\n    //    'gdd_ytd_por_min':,\n    //    'datesOfLastFreeze_15yr':,\n    //    'datesOfFirstFreeze_15yr':,\n    //    'firstFcstDate':,\n    //    'gdd_fcst_15yr_max':,\n    //    'gdd_fcst_15yr_min':,\n    //    'gdd_fcst_15yr_ave':,\n    //};\n\n}\n\n","///////////////////////////////////////////////////////////////////////////////\n//\n// Climate Smart Farming Growing Degree Day Calculator\n// Copyright (c) 2018 Cornell Institute for Climate Smart Solutions\n// All Rights Reserved\n//\n// This software is published under the provisions of the GNU General Public\n// License <http://www.gnu.org/licenses/>. A text copy of the license can be\n// found in the file 'LICENSE' included with this software.\n//\n// A text copy of the copyright notice, licensing conditions and disclaimers\n// is available in the file 'COPYRIGHT' included with this software.\n//\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport ls from 'local-storage';\n\n// Components\nimport LoadPointData from './LoadPointData';\nimport LoadPointDataFcst from './LoadPointDataFcst';\nimport DisplayChart from './DisplayChart';\nimport UserInput from './UI/UserInput';\nimport VarPopover from './VarPopover';\nimport {HelpMain} from \"./HelpToolContent\";\nimport HelpToolPopover from \"./HelpToolPopover\";\n\nimport { processWeatherData } from './processWeatherData';\n\nclass ToolContents extends Component {\n\n    constructor(props) {\n        super(props);\n        this.gdd_list = ['86/50','50','49','48','47','46','45','44','43','42','41','40',\n          '39','38','37','36','35','34','33','32']\n        this.defaultLocation = {\n          \"address\":\"Cornell University, Ithaca, NY\",\n          \"lat\":42.45,\n          \"lng\":-76.48,\n          \"id\":\"default\",\n          \"planting_date\":\"01/01/2022\",\n          \"gdd_base\":\"50\",\n          \"gdd_target\":\"1500\",\n          \"freeze_threshold\":\"32\",\n        }\n        this.defaultLocations = {\n          'default':this.defaultLocation\n        }\n        this.state = {\n          locations: ls('CSF-GDDTOOL.locations') || this.defaultLocations,\n          selected: ls('CSF-GDDTOOL.selected') || this.defaultLocation['id'],\n          pointData: null,\n          dataIsLoading: false,\n          targetIsEnabled: false,\n          freezeIsEnabled: false,\n          // view options: 'season-outlook', 'season-to-date', 'climate-change', 'summary'\n          view: 'season-outlook'\n        }\n    }\n\n    componentDidMount() {\n        // Find all data for a given location\n        if ((this.state.locations && this.state.selected)) {\n          this.loadAllData()\n        }\n    }\n\n    componentDidUpdate(prevProps,prevState) {\n        if (prevState.selected!==this.state.selected) {\n          this.loadAllData()\n        }\n        if (prevState.locations!==this.state.locations) { ls.set('CSF-GDDTOOL.locations',this.state.locations) }\n        if (prevState.selected!==this.state.selected) { ls.set('CSF-GDDTOOL.selected',this.state.selected) }\n    }\n\n    addOneDayToStringDate = (d) => {\n      return moment(d,'YYYY-MM-DD').add(1,'days').format('YYYY-MM-DD')\n    }\n\n    subtractOneDayToStringDate = (d) => {\n      return moment(d,'YYYY-MM-DD').subtract(1,'days').format('YYYY-MM-DD')\n    }\n\n    loadAllData = () => {\n          this.handleDataIsLoadingChange(true)\n          setTimeout(() => {\n\n            LoadPointData({param:this.getAcisParamsObs()})\n              .then(response_obs => {\n\n                //handle observed data\n                let data_obs = response_obs['data']\n                let last_obs_date = data_obs.slice(-1)[0][0]\n\n                LoadPointDataFcst({param:this.getAcisParamsFcst(last_obs_date)})\n                  .then(response_fcst => {\n\n                    //handle forecast data\n                    // - need to convert string temperatures to int\n                    // - need to convert dates one day forward for consistency with morning obs\n                    let data_fcst = []\n                    if ('dlyData' in response_fcst) {\n                      data_fcst.push(...response_fcst['dlyData'].map(item => [this.addOneDayToStringDate(item[0].split('T')[0]),parseInt(item[2],10),parseInt(item[3],10)]))\n                    }\n                    if ('dlyFcstData' in response_fcst) {\n                      data_fcst.push(...response_fcst['dlyFcstData'].map(item => [this.addOneDayToStringDate(item[0].split('T')[0]),parseInt(item[1],10),parseInt(item[2],10)]))\n                    }\n                    data_fcst = data_fcst.filter(item => item[0] > last_obs_date)\n\n                    // combine obs and fcst data into one array\n                    let data_obs_fcst = data_obs.concat(data_fcst)\n                    let result = {'data':data_obs_fcst, 'last_obs_date':last_obs_date}\n\n                    this.handleDataChange(result)\n                    this.handleDataIsLoadingChange(false)\n                  })\n              })\n            },\n            1000\n          );\n    }\n\n    getAcisParamsObs = () => {\n          return {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              \"loc\":[this.state.locations[this.state.selected]['lng'],this.state.locations[this.state.selected]['lat']].join(),\n              \"sdate\":\"1980-01-01\",\n              \"edate\":moment().format(\"YYYY-MM-DD\"),\n              \"grid\":\"nrcc-model\",\n              \"elems\":[\n                {\n                 \"name\":\"maxt\",\n                 \"interval\":[0,0,1]\n                },\n                {\n                 \"name\":\"mint\",\n                 \"interval\":[0,0,1]\n                }\n              ]})\n          };\n    }\n\n    getAcisParamsFcst = (sdate) => {\n          return {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              \"lat\":this.state.locations[this.state.selected]['lat'],\n              \"lon\":this.state.locations[this.state.selected]['lng'],\n              \"tzo\":-5,\n              //\"sdate\":\"2022061000\",\n              \"sdate\":sdate.replaceAll(\"-\",\"\")+\"00\",\n              \"edate\":\"now\",\n              })\n          };\n    }\n\n    handleSelectedLocationChange = (v) => {\n        this.setState({\n          selected: v\n        })\n    }\n\n    handleLocationInfoChange = (e) => {\n        let k = e.target.name\n        let v = e.target.value\n        this.setState(prevState => ({\n          ...prevState,\n          locations : {\n              ...prevState.locations, ...{[prevState.selected] : {...prevState.locations[prevState.selected], [k]: v} }\n          }\n        }) )\n    }\n\n    handleLocationPickerOutput = (l,s) => {\n        // include additional items for each location (items like gdd_base, gdd_target, freeze_threshold, planting_date)\n        let l_new = {}\n        for (let k in l) {\n          if (l.hasOwnProperty(k)) {\n            if (this.state.locations.hasOwnProperty(k)) {\n              l_new[k] = { ...this.defaultLocation, ...this.state.locations[k], ...l[k] }\n            } else {\n              l_new[k] = { ...this.defaultLocation, ...l[k] }\n            }\n          }\n        }\n        this.setState({\n          locations: l_new,\n          selected: s['id']\n        })\n    }\n\n    handleDataChange = (d) => {\n        this.setState({\n          pointData: d\n        })\n    }\n\n    handleViewChange = (v) => {\n        this.setState({\n          view: v\n        })\n    }\n\n    handleDataIsLoadingChange = (b) => {\n        this.setState({\n          dataIsLoading: b\n        })\n    }\n\n    handlePlantingDateChange = (...e) => {\n        // put data in format expected, then pass to handleLocationInfoChange\n        let e_new = { 'target': {'name':'planting_date', 'value':e[1]} }\n        this.handleLocationInfoChange(e_new)\n    }\n\n    handleTargetIsEnabledChange = () => {\n        this.setState(prevState => ({\n          targetIsEnabled: !prevState.targetIsEnabled\n        }) )\n    }\n\n    handleFreezeIsEnabledChange = () => {\n        this.setState(prevState => ({\n          freezeIsEnabled: !prevState.freezeIsEnabled\n        }) )\n    }\n\n    render() {\n\n        let display_DisplayChart;\n        let display_UserInput;\n        let display_VarPopover;\n        if (this.state.pointData) {\n            display_DisplayChart = <DisplayChart\n                        locInfo={this.state.locations[this.state.selected]}\n                        freezeIsEnabled={this.state.freezeIsEnabled}\n                        targetIsEnabled={this.state.targetIsEnabled}\n                        chartWeatherData={\n                          processWeatherData(this.state.pointData['data'],\n                          this.state.pointData['last_obs_date'],\n                          this.state.locations[this.state.selected]['planting_date'],\n                          this.state.locations[this.state.selected]['gdd_base'],\n                          this.state.locations[this.state.selected]['freeze_threshold'])\n                        }\n                        view={this.state.view}\n                        dataIsLoading={this.state.dataIsLoading}\n                      />\n        }\n\n        display_UserInput = <UserInput\n                                  locations={this.state.locations}\n                                  selected={this.state.selected}\n                                  view={this.state.view}\n                                  targetIsEnabled={this.state.targetIsEnabled}\n                                  freezeIsEnabled={this.state.freezeIsEnabled}\n                                  gdd_list={this.gdd_list}\n                                  onchange_locationPicker={this.handleLocationPickerOutput}\n                                  onchange_view={this.handleViewChange}\n                                  onchange_plantingDate={this.handlePlantingDateChange}\n                                  onchange_locInfo={this.handleLocationInfoChange}\n                                  onchange_targetIsEnabled={this.handleTargetIsEnabledChange}\n                                  onchange_freezeIsEnabled={this.handleFreezeIsEnabledChange}\n                                />\n\n        display_VarPopover = <VarPopover content={display_UserInput} />;\n\n        return (\n            <>\n\n                <Grid container direction=\"row\" justify=\"stretch\" spacing={0}>\n\n                  <Grid item container direction=\"column\" justify=\"top\" alignItems=\"center\" spacing={1} md>\n                    <Hidden mdUp>\n                        <Grid item>\n                          {display_VarPopover}\n                        </Grid>\n                    </Hidden>\n                    <Hidden smDown>\n                        <Grid item>\n                          {display_UserInput}\n                        </Grid>\n                    </Hidden>\n                  </Grid>\n\n                  <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1} md={9}>\n                      <Grid item style={{width:'100%', height:'70vh'}}>\n                        {this.state.pointData && display_DisplayChart}\n                      </Grid>\n                      <Grid item container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item>\n                          {this.state.pointData && \n                            <Button\n                              variant={this.state.view==='season-to-date' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                              onClick={() => this.handleViewChange('season-to-date')}\n                            >\n                              Season To Date\n                            </Button>\n                          }\n                        </Grid>\n\n                        <Grid item>\n                          {this.state.pointData && \n                            <Button\n                              variant={this.state.view==='season-outlook' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                              onClick={() => this.handleViewChange('season-outlook')}\n                            >\n                              Season Outlook\n                            </Button>\n                          }\n                        </Grid>\n                        <Grid item>\n                          {this.state.pointData && \n                            <HelpToolPopover content={<HelpMain/>} />\n                          }\n                        </Grid>\n                      </Grid>\n                  </Grid>\n\n                </Grid>\n\n\n                <div className=\"csftool-location-dialog\">\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ToolContents;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\n//import { inject, observer} from 'mobx-react';\nimport { MuiThemeProvider, createMuiTheme, withStyles, withTheme  } from \"@material-ui/core/styles\";\nimport green from '@material-ui/core/colors/green';\n\n// Components\nimport ToolContents from '../components/ToolContents'\n\n// Styles\n//import '../styles/App.css'\n\nconst theme = createMuiTheme({\n  //shadows: [\"none\"],\n  shadows: Array(25).fill('none'),\n  palette: {\n    primary: {\n        main: green[800]\n    },\n    alternativeTextColor: green[800],\n  },\n  overrides: {\n    MUIDataTableBodyRow: {\n      root: {\n        '&:nth-child(odd)': {\n          backgroundColor: '#D3D3D3'\n        }\n      }\n    },\n  },\n  typography: {\n    body2: {\n      fontSize: '0.8rem',\n      '@media (min-width:960px)': {\n        fontSize: '1.0rem',\n      },\n    },\n  }\n});\n\nconst styles = theme => ({\n  root: {},\n});\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <MuiThemeProvider theme={theme}>\n              <div id=\"container\" className=\"App\">\n                  <ToolContents />\n              </div>\n            </MuiThemeProvider>\n        );\n\n    }\n}\n\nexport default withStyles(styles)(withTheme(App));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import reportWebVitals from './reportWebVitals';\n\n//Components\nimport App from './components/App';\n\n//Styles\n//import './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('csftool-content')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}