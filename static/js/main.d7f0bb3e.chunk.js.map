{"version":3,"sources":["components/LoadPointData.js","components/DisplayChart.js","components/UI/LocationPicker.js","components/UI/PlantingDatePicker.js","components/UI/GddBaseSelect.js","components/UI/GddTargetSelect.js","components/UI/GddTargetSelectEnable.js","components/UI/FreezeThreshSelect.js","components/UI/FreezeThreshSelectEnable.js","components/UI/UserInput.js","components/VarPopover.js","components/processWeatherData.js","components/ToolContents.js","components/App.js","index.js"],"names":["protocol","window","location","LoadPointData","param","fetch","then","r","json","data","propTypes","PropTypes","object","isRequired","HighchartsMore","Highcharts","Exporting","ExportData","DisplayCharts","props","i","countOfThisDate","plantingYear","chartWeatherData","dates_for_summary","split","countItemInArray","item","arr","count","length","dataForFirstFreeze","datesOfFirstFreeze_15yr","push","x","moment","utc","valueOf","y","color","dataForLastFreeze","datesOfLastFreeze_15yr","tooltipFormatter","header","dateFormat","this","tips","points","series","name","toFixed","point","low","high","targetInfo","year","locInfo","slice","crosshair_zindex","gdd_ytd_por_min","plotLines","targetIsEnabled","idxOfTarget","idxOfMaxObsValue","result","label","gdd_ytd_selected","Math","max","findIndex","number","dates_selected_year","indexOf","gdd_ytd_15yr_ave","getTargetDate","text","width","zIndex","value","containerProps","style","height","highcharts","options","plotOptions","line","animation","type","lineWidth","marker","symbol","states","hover","enabled","halo","size","exporting","menuItemDefinitions","downloadCSV","downloadXLS","buttons","contextButton","menuItems","chart","marginTop","backgroundColor","credits","href","title","subtitle","tooltip","useHtml","shared","borderColor","borderWidth","borderRadius","shadow","xDateFormat","positioner","shape","crosshairs","snap","formatter","legend","align","symbolRadius","floating","verticalAlign","layout","xAxis","startOnTick","endOnTick","min","view","labels","dateTimeLabelFormats","day","week","month","yAxis","gridZIndex","visible","freezeIsEnabled","opposite","map","index","fillColor","lineColor","radius","gdd_ytd_30yr_nor","gdd_ytd_por_max","showInLegend","fillOpacity","pointWidth","enableMouseTracking","concat","dataIsLoading","Backdrop","invisible","open","CircularProgress","jQuery","URL_google_api","LocationPicker","initMapDialog","state","mapDialogInitialized","google","CsfToolLocationDialog","map_dialog","ev","context","locations_picker","all_locations","selected_picker","selected_location","handleOutput","setState","openMap","locations","selected","handleScriptsLoaded","googleMapsReady","locationDialogReady","handleLocationDialogLoad","console","log","handleGoogleMapsLoad","className","isHydrating","src","onLoad","Button","variant","onClick","Component","withStyles","theme","utils","DateFnsUtils","disableToolbar","views","format","minDate","maxDate","PopoverProps","left","top","margin","id","onChange","onchange","autoOk","InputProps","readOnly","KeyboardButtonProps","getLabel","v","root","display","flexWrap","formControl","minWidth","menuPaper","maxHeight","green","classes","autoComplete","FormControl","InputLabel","htmlFor","Select","MenuProps","paper","inputProps","values","MenuItem","maxWidth","TextField","fullWidth","disabled","GreenCheckbox","checked","Checkbox","GddTargetSelectEnable","FormControlLabel","control","FreezeThreshSelectEnable","UserInput","Box","paddingTop","border","Grid","container","direction","spacing","justify","alignItems","Typography","marginRight","marginLeft","namespace","onchange_locationPicker","onchange_view","onchange_plantingDate","gdd_list","onchange_locInfo","onchange_targetIsEnabled","onchange_freezeIsEnabled","React","VarPopover","anchorEl","handleClick","event","currentTarget","handleClose","Boolean","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","content","typography","processWeatherData","plantingDate","freezeThreshold","results","plantingDateFormatted","selectedYear","dataFiltered","filter","array","getSelectedYearData","currentYear","isLeapYearSelected","isLeapYear","distinctDates","average","reduce","p","c","isOnDate","isNotCurrentYear","isAfterPlantingDate","Set","sort","forEach","d","dataToSummarizeForDate","parseInt","getExtremesAndAverageData","seasonStartDates","idxOfDate","springFreezes","fallFreezes","years","dates","isBelowFreezeThreshold","toString","getFreezeData","ToolContents","getAcisParamsGDD","method","headers","body","JSON","stringify","join","handleSelectedLocationChange","handleLocationInfoChange","e","k","target","prevState","handleLocationPickerOutput","l","s","l_new","hasOwnProperty","defaultLocation","handleDataChange","pointData","handleViewChange","handleDataIsLoadingChange","b","handlePlantingDateChange","e_new","handleTargetIsEnabledChange","handleFreezeIsEnabledChange","defaultLocations","ls","setTimeout","response","prevProps","set","display_DisplayChart","display_UserInput","display_VarPopover","DisplayChart","md","Hidden","mdUp","smDown","createMuiTheme","shadows","Array","fill","palette","primary","main","alternativeTextColor","overrides","MUIDataTableBodyRow","body2","fontSize","App","withTheme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7f0bb3e.chunk.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//import React from 'react';\n//import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst protocol = window.location.protocol;\n\nconst LoadPointData = ({param}) => {\n        return fetch(`${protocol}//grid2.rcc-acis.org/GridData`,param)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data : null;\n             });\n}\n\nLoadPointData.propTypes = {\n  param: PropTypes.object.isRequired,\n};\n\nexport default LoadPointData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport HighchartsMore from 'highcharts/highcharts-more'\nimport Exporting from 'highcharts/modules/exporting'\nimport ExportData from 'highcharts/modules/export-data'\nimport HighchartsReact from 'highcharts-react-official';\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core//CircularProgress';\nimport Backdrop from '@material-ui/core//Backdrop';\n\nHighchartsMore(Highcharts)\nExporting(Highcharts)\nExportData(Highcharts)\nwindow.Highcharts = Highcharts;\n\nconst DisplayCharts = (props) => {\n        const plantingYear = props.chartWeatherData.dates_for_summary[0].split('-')[0]\n\n        // function to count item in array\n        const countItemInArray = (item,arr) => {\n            let i\n            let count = 0;\n            for(i = 0; i < arr.length; ++i){\n                if(arr[i] === item)\n                    count++;\n            }\n            return count\n        }\n\n        // data for first freeze\n        let dataForFirstFreeze = [];\n        let i, countOfThisDate;\n        for (i=0; i<props.chartWeatherData.datesOfFirstFreeze_15yr.length; i++) {\n            countOfThisDate = countItemInArray(props.chartWeatherData.datesOfFirstFreeze_15yr[i],props.chartWeatherData.datesOfFirstFreeze_15yr)\n            dataForFirstFreeze.push( {x: moment.utc(props.chartWeatherData.datesOfFirstFreeze_15yr[i],'YYYY-MM-DD').valueOf(), y: countOfThisDate, color: 'rgb(0,0,255)'} )\n        }\n\n        // data for last freeze\n        let dataForLastFreeze = [];\n        for (i=0; i<props.chartWeatherData.datesOfLastFreeze_15yr.length; i++) {\n            countOfThisDate = countItemInArray(props.chartWeatherData.datesOfLastFreeze_15yr[i],props.chartWeatherData.datesOfLastFreeze_15yr)\n            dataForLastFreeze.push( {x: moment.utc(props.chartWeatherData.datesOfLastFreeze_15yr[i],'YYYY-MM-DD').valueOf(), y: countOfThisDate, color: 'rgb(0,0,255)'} )\n        }\n\n        function tooltipFormatter() {\n            var i, item;\n            var header = '<span style=\"font-size:14px;font-weight:bold;text-align:center\">' + Highcharts.dateFormat('%b %d, %Y', this.x) + '</span>';\n            var tips = \"\";\n            for (i=0; i<this.points.length; i++) {\n                item = this.points[i];\n                //if ( (item.series.name !== \"POR Max\") && (item.series.name !== \"POR Min\") && (item.series.name !== \"POR\") ) {\n                if ( item.series.name !== \"Period of Record\" ) {\n                    tips += '<br/>' + item.y.toFixed(0) + ' : <span style=\"color:'+item.color+';font-size:12px;font-weight:bold\">' +  item.series.name + '</span>';\n                }\n                if (item.series.name === \"Period of Record\") {\n                    tips += '<br/>' + item.point.low.toFixed(0) + '-' + item.point.high.toFixed(0) + ' : <span font-size:12px;\">Period of Record</span>';\n                }\n            }\n            return header + tips;\n        }\n\n        let year = props.locInfo['planting_date'].slice(6)\n        let crosshair_zindex = (props.chartWeatherData.gdd_ytd_por_min[-62]<100) ? 4 : 1;\n\n        // find date and create label for plotLine associated with user's provided target GDD value\n        const getTargetDate = () => {\n            let idxOfTarget\n            let idxOfMaxObsValue\n            let result\n            let label\n            if (props.chartWeatherData.gdd_ytd_selected.length>0) {\n              if (Math.max(...props.chartWeatherData.gdd_ytd_selected)>=props.locInfo['gdd_target']) {\n                idxOfTarget=props.chartWeatherData.gdd_ytd_selected.findIndex(function(number) {\n                  return number > props.locInfo['gdd_target'];\n                });\n                result = moment.utc(props.chartWeatherData.dates_selected_year[idxOfTarget], 'YYYY-MM-DD').valueOf()\n                label = 'Target Observed'\n              } else {\n                idxOfMaxObsValue = props.chartWeatherData.gdd_ytd_selected.indexOf( Math.max(...props.chartWeatherData.gdd_ytd_selected) )\n                idxOfTarget=props.chartWeatherData.gdd_ytd_15yr_ave.findIndex(function(number) {\n                  return (number+props.chartWeatherData.gdd_ytd_selected[idxOfMaxObsValue]-props.chartWeatherData.gdd_ytd_15yr_ave[idxOfMaxObsValue]) > props.locInfo['gdd_target'];\n                });\n                result = moment.utc(props.chartWeatherData.dates_for_summary[idxOfTarget], 'YYYY-MM-DD').valueOf()\n                label = 'Target Fcst'\n              }\n            } else {\n              idxOfTarget=props.chartWeatherData.gdd_ytd_15yr_ave.findIndex(function(number) {\n                return number > props.locInfo['gdd_target'];\n              });\n              result = moment.utc(props.chartWeatherData.dates_for_summary[idxOfTarget], 'YYYY-MM-DD').valueOf()\n              label = 'Target Fcst'\n            }\n            return {'value':result, 'label':label}\n        }\n\n        // construct plotLine for user's provided target GDD value\n        let plotLines = []\n        let targetInfo\n        if (props.targetIsEnabled) {\n            targetInfo = getTargetDate()\n            plotLines.push({ label: {text:targetInfo.label, y:30}, color: '#4caf50', width: 4, zIndex: 6, value: targetInfo.value })\n        }\n\n        const genChartConfig = () => {\n              return {\n                 plotOptions: {\n                     line: {\n                         animation: true,\n                     },\n                     series: {\n                         type: 'line',\n                         animation: false,\n                         lineWidth: 4,\n                         marker: {\n                             symbol: 'circle',\n                         },\n                         states: {\n                             hover: {\n                                 enabled: true,\n                                 halo: {\n                                     size: 0\n                                 }\n                             }\n                         }\n                     }\n                 },\n                 exporting: {\n                   menuItemDefinitions: {\n                     // Custom definition\n                     downloadCSV: {\n                       text: 'Download as CSV table'\n                     },\n                     downloadXLS: {\n                       text: 'Download as XLS table'\n                     }\n                   },\n                   buttons: {\n                     contextButton: {\n                       menuItems: [\n                         \"printChart\",\n                         \"separator\",\n                         \"downloadPNG\",\n                         \"downloadJPEG\",\n                         \"downloadPDF\",\n                         \"downloadSVG\",\n                         \"separator\",\n                         \"downloadCSV\",\n                         \"downloadXLS\",\n               //              \"viewData\",\n                         \"openInCloud\"\n                       ]\n                     }\n                   }\n                 },\n                 chart: { marginTop: 60, backgroundColor: null },\n                 credits: {\n                   href: \"http://www.rcc-acis.org\",\n                   text: \"Powered by ACIS\"\n                 },\n                 title: {\n                     text: year+' Cumulative Growing Degree Days (Base '+props.locInfo['gdd_base']+')'\n                 },\n                 subtitle: {\n                     text: props.locInfo['address'],\n                     style:{\"font-size\":\"14px\",color:\"#000000\"},\n                 },\n                 tooltip: { useHtml:true, shared:true, borderColor:\"#000000\", borderWidth:2, borderRadius:8, shadow:false, backgroundColor:\"#ffffff\",\n                   xDateFormat:\"%b %d, %Y\", positioner:function(){return {x:80, y:60}}, shape: 'rect',\n                   crosshairs: { width:1, color:\"#ff0000\", snap:true, zIndex: crosshair_zindex }, formatter:tooltipFormatter },\n                 legend: { align: 'left', symbolRadius: 0, floating: true, verticalAlign: 'top', layout: 'vertical', x: 65, y: 50 },\n                 xAxis: {\n                     type: 'datetime',\n                     startOnTick: false,\n                     endOnTick: false,\n                     min: moment.utc(props.locInfo['planting_date'],'MM/DD/YYYY').valueOf(),\n                     max: props.view==='season-outlook' ? moment.utc(plantingYear+'-12-31','YYYY-MM-DD').valueOf() : moment.utc(props.chartWeatherData.dates_selected_year[props.chartWeatherData.dates_selected_year.length-1],'YYYY-MM-DD').valueOf(),\n                     labels: { align: 'center', x: 0, y: 20 },\n                     plotLines: plotLines,\n                     dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n                 },\n                 yAxis: [\n                     { title:{ text:'Cumulative GDD', style:{\"font-size\":\"14px\", color:\"#000000\"}}, min: 0,\n                         gridZIndex:1, labels:{style:{color:\"#000000\"}}},\n                     { title:{ text:'First/Last Freeze (# yrs)', align:'low', style:{\"font-size\":\"14px\", color:\"#0000FF\"}}, min: 0, max: 8,\n                         visible: props.freezeIsEnabled,\n                     labels:{style:{color:\"#0000FF\"}}, opposite: true },\n                 ],\n                 series: [{\n                     name: \"Season to Date\",\n                     data: props.chartWeatherData.gdd_ytd_selected.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_selected_year[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 24, lineWidth: 2, color: \"#00dd00\", shadow: false,\n                     marker: { enabled: true, fillColor: \"#00dd00\", lineWidth: 2, lineColor: \"#00dd00\", radius:2, symbol:\"circle\" }\n                   },{\n                     name: \"6 Day Forecast\",\n                     data: [],\n                     type: \"line\", zIndex: 24, lineWidth: 2, color: \"#dd0000\", shadow: false,\n                     marker: { enabled: true, fillColor: \"#dd0000\", lineWidth: 2, lineColor: \"#dd0000\", radius:2, symbol:\"circle\" }\n                   },{\n                     name: \"15 Year Average\",\n                     data: props.chartWeatherData.gdd_ytd_15yr_ave.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 23, lineWidth: 2, color: \"#0000ff\",\n                     marker: { enabled: false, states: { hover: { enabled: false }} }\n                   },{\n                     name: '30 Year \"Normal\"',\n                     data: props.chartWeatherData.gdd_ytd_30yr_nor.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,item]\n                     }),\n                     type: \"line\", zIndex: 22, lineWidth: 2, color: \"#B041FF\",\n                     marker: { enabled: false, states: { hover: { enabled: false }} }\n                   },{\n                     name: \"Period of Record\",\n                     data: props.chartWeatherData.gdd_ytd_por_min.map((item,index) => {\n                       let date_item = moment.utc(props.chartWeatherData.dates_for_summary[index],\"YYYY-MM-DD\").valueOf()\n                       return [date_item,props.chartWeatherData.gdd_ytd_por_min[index], props.chartWeatherData.gdd_ytd_por_max[index]]\n                     }),\n                     type: \"arearange\", showInLegend: true, zIndex: 10, lineWidth: 2, color: \"#444444\", fillColor: \"#eeeeee\", fillOpacity: 0.1,\n                     marker : {enabled: false, states: { hover: { enabled: false }}, symbol: 'square', lineWidth: 2, lineColor: '#444444', radius: 12 }\n                   },{\n                     name: 'First/Last Freezes (last 15 yrs)', type: 'column', pointWidth: 1, borderWidth: 0,\n                     zIndex: props.view==='season-outlook' ? 1 : 25,\n                     visible: props.freezeIsEnabled,\n                     yAxis: 1,\n                     showInLegend: props.freezeIsEnabled,\n                     enableMouseTracking: false,\n                     data: dataForLastFreeze.concat(dataForFirstFreeze),\n                   }\n                 ],\n              }\n            }\n\n    return(\n\n      <>\n        <HighchartsReact\n          containerProps={{ style: { height: \"100%\" } }}\n          highcharts={Highcharts}\n          options={genChartConfig()}\n          //callback={afterRender}\n        />\n\n        {props.dataIsLoading &&\n          <Backdrop\n            style={{zIndex:1000}}\n            invisible={true}\n            //open={!props.values}\n            open={props.dataIsLoading}\n          >\n            <CircularProgress size={200} color=\"primary\"/>\n          </Backdrop>\n        }\n      </>\n\n    );\n\n\n}\n\nDisplayCharts.propTypes = {\n  locInfo: PropTypes.object.isRequired,\n  freezeIsEnabled: PropTypes.bool.isRequired,\n  targetIsEnabled: PropTypes.bool.isRequired,\n  chartWeatherData: PropTypes.object.isRequired,\n  view: PropTypes.string.isRequired,\n  dataIsLoading: PropTypes.bool.isRequired,\n};\n\nexport default DisplayCharts;\n","///////////////////////////////////////////////////////////////////////////////\n//\n// Climate Smart Farming Growing Degree Day Calculator\n// Copyright (c) 2018 Cornell Institute for Climate Smart Solutions\n// All Rights Reserved\n//\n// This software is published under the provisions of the GNU General Public\n// License <http://www.gnu.org/licenses/>. A text copy of the license can be\n// found in the file 'LICENSE' included with this software.\n//\n// A text copy of the copyright notice, licensing conditions and disclaimers\n// is available in the file 'COPYRIGHT' included with this software.\n//\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport ScriptTag from 'react-script-tag';\n//import Icon from 'react-icons-kit';\n//import { mapMarker } from 'react-icons-kit/fa/mapMarker';       \nimport jQuery from 'jquery';\nimport 'jquery-ui/themes/base/core.css';\nimport 'jquery-ui/themes/base/theme.css';\nimport 'jquery-ui/themes/base/button.css';\nimport 'jquery-ui/themes/base/dialog.css';\nimport 'jquery-ui/ui/core';\nimport 'jquery-ui/ui/widgets/button';\nimport 'jquery-ui/ui/widgets/dialog';\nimport '../../styles/LocationPicker.css';\nimport '../../styles/location-dialog.css';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nwindow.jQuery = jQuery;\n\nconst HOST = 'https://maps.google.com/maps/api/js';\nconst KEY = 'AIzaSyDv5pQYe9kRbolVUt0o8XSXSQl4g8BHrrQ';\nconst URL_google_api = `${HOST}?key=${KEY}`;\n//const URL_location_dialog = 'http://tools.climatesmartfarming.org/gddtool_react_v3/js/location-dialog-min.js'\n//const URL_location_dialog = 'https://cicss.github.io/csf-location-picker-react/assets/location-dialog-min.js'\n//const URL_location_dialog = 'https://nrcc-cornell.github.io/csf-gddtool-v4/js/location-dialog-min.js'\nconst URL_location_dialog = 'https://nrcc-cornell.github.io/csf-location-picker-react/js/location-dialog-min.js'\n\nclass LocationPicker extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      googleMapsReady: (window.google) ? true : false,\n      locationDialogReady: false,\n      mapDialogInitialized: false\n    }\n  }\n\n  initMapDialog = () => {\n    if (!this.state.mapDialogInitialized) {\n      var options = { width:600, height:500, google:window.google };\n      jQuery(\".csftool-location-dialog\").CsfToolLocationDialog(options);\n      this.map_dialog = jQuery(\".csftool-location-dialog\").CsfToolLocationDialog();\n      this.map_dialog(\"bind\", \"close\", (ev, context) => {\n        let locations_picker = context.all_locations\n        let selected_picker = context.selected_location\n        this.props.handleOutput(locations_picker,selected_picker);\n        //console.log(locations_picker)\n        //console.log(selected_picker)\n      });\n      this.setState({\n        mapDialogInitialized: true\n      })\n    }\n  }\n\n  openMap = () => {\n    this.map_dialog(\"locations\", this.props.locations);\n    this.map_dialog(\"open\", this.props.selected);\n  }\n\n  handleScriptsLoaded = () => {\n    if (this.state.googleMapsReady && this.state.locationDialogReady) {\n      this.initMapDialog();\n    }\n  }\n\n  handleLocationDialogLoad = () => {\n    console.log('location dialog script loaded')\n    this.setState({\n      locationDialogReady: true\n    })\n    this.handleScriptsLoaded();\n  }\n\n  handleGoogleMapsLoad = () => {\n    console.log('google maps script loaded')\n    this.setState({\n      googleMapsReady: true\n    })\n    this.handleScriptsLoaded();\n  }\n\n  render() {\n        return (\n            <div className=\"location-input-div\">\n              {!this.state.googleMapsReady &&\n                <ScriptTag isHydrating={false} type=\"text/javascript\" src={URL_google_api} onLoad={this.handleGoogleMapsLoad} />\n              }\n              {!this.state.locationDialogReady &&\n                <ScriptTag isHydrating={false} type=\"text/javascript\" src={URL_location_dialog} onLoad={this.handleLocationDialogLoad} />\n              }\n              {this.state.mapDialogInitialized &&\n                <Button\n                  variant=\"contained\" color=\"primary\" size=\"small\"\n                  onClick={this.openMap}\n                >\n                  Edit\n                </Button>\n              }\n            </div>\n        )\n  }\n\n};\n\nLocationPicker.propTypes = {\n  namespace: PropTypes.string.isRequired,\n  locations: PropTypes.object.isRequired,\n  selected: PropTypes.string.isRequired,\n  handleOutput: PropTypes.func.isRequired,\n};\n\nexport default LocationPicker;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport 'date-fns';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst styles = theme => ({\n  //root: {\n  //  display: 'flex',\n  //  flexWrap: 'wrap',\n  //},\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst PlantingDatePicker = (props) => {\n        //const { classes } = props;\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              views={[\"date\"]}\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              minDate=\"01/01/1980\"\n              maxDate=\"12/31/2022\"\n              PopoverProps={{style: {...{left: '180px', top: '-140px'}}}}\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              label=\"Planting Date\"\n              value={props.value}\n              onChange={props.onchange}\n              autoOk={true}\n              InputProps={{ readOnly: true }}\n              KeyboardButtonProps={{\n                'aria-label': 'change planting date',\n              }}\n              style={{ width: 160 }}\n            />\n          </MuiPickersUtilsProvider>\n        );\n}\n\nPlantingDatePicker.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(PlantingDatePicker);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport green from '@material-ui/core/colors/green';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 160,\n  },\n  menuPaper: {\n    maxHeight: 190,\n    backgroundColor: green[600],\n    color: '#ffffff',\n  }\n});\n\nconst getLabel = (v) => {\n  return v+'°F'\n}\n\nconst GddBaseSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"gdd_base\">GDD Base</InputLabel>\n              <Select\n                value={props.value}\n                onChange={props.onchange}\n                margin='normal'\n                MenuProps={{ classes: { paper: classes.menuPaper } }}\n                inputProps={{\n                  name: 'gdd_base',\n                  id: 'gdd_base',\n                }}\n              >\n                {props.values &&\n                  props.values.map((v,i) => (\n                    <MenuItem key={i} value={v}>{getLabel(v)}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>\n          </form>\n        );\n}\n\nGddBaseSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  values: PropTypes.array.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(GddBaseSelect);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 100,\n    maxWidth: 120,\n  },\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst GddTargetSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <TextField\n                fullWidth\n                color='primary'\n                label='GDD Target'\n                margin='none'\n                value={props.value}\n                disabled={!props.enabled}\n                onChange={props.onchange}\n                inputProps={{\n                  name: 'gdd_target',\n                  id: 'gdd_target',\n                }}\n              />\n            </FormControl>\n          </form>\n        );\n}\n\nGddTargetSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(GddTargetSelect);\n","///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[800],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nclass GddTargetSelectEnable extends Component {\n\n  render() {\n        return (\n\n          <FormControlLabel\n            control={<GreenCheckbox checked={this.props.value} onChange={this.props.onchange} name=\"enableTarget\" />}\n            label=\"\"\n          />\n\n        )\n  }\n\n};\n\nGddTargetSelectEnable.propTypes = {\n  value: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default GddTargetSelectEnable;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 100,\n    maxWidth: 120,\n  },\n});\n\n//const getLabel = (v) => {\n//  return v+'°F'\n//}\n\nconst FreezeThreshSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <TextField\n                fullWidth\n                color='primary'\n                label='Frost Temp (°F)'\n                margin='none'\n                value={props.value}\n                disabled={!props.enabled}\n                onChange={props.onchange}\n                inputProps={{\n                  name: 'freeze_threshold',\n                  id: 'freeze_threshold',\n                }}\n              />\n            </FormControl>\n          </form>\n        );\n}\n\nFreezeThreshSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(FreezeThreshSelect);\n","///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[800],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nclass FreezeThreshSelectEnable extends Component {\n\n  render() {\n        return (\n\n          <FormControlLabel\n            control={<GreenCheckbox checked={this.props.value} onChange={this.props.onchange} name=\"enableTarget\" />}\n          />\n\n        )\n  }\n\n};\n\nFreezeThreshSelectEnable.propTypes = {\n  value: PropTypes.bool.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default FreezeThreshSelectEnable;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n//import red from '@material-ui/core/colors/red';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Components\nimport LocationPicker from './LocationPicker';\nimport PlantingDatePicker from './PlantingDatePicker';\nimport GddBaseSelect from './GddBaseSelect';\nimport GddTargetSelect from './GddTargetSelect';\nimport GddTargetSelectEnable from './GddTargetSelectEnable';\nimport FreezeThreshSelect from './FreezeThreshSelect';\nimport FreezeThreshSelectEnable from './FreezeThreshSelectEnable';\n\n//import StationPickerMap from '../../common/StationPickerMap';\n//import VarPicker from '../VarPicker';\n//import ScenarioPicker from '../ScenarioPicker';\n//import TimescalePicker from '../TimescalePicker';\n//import PeriodPicker from '../PeriodPicker';\n//import HelpUserPopover from '../HelpUserPopover';\n//import HelpUserContent from '../HelpUserContent';\n\n\nclass UserInput extends React.Component {\n  //constructor(props) {\n  //    super(props);\n  //}\n\n  render() {\n    //const { classes } = this.props;\n\n    return (\n      <Box paddingTop={1} border={2} borderRadius={4} borderColor=\"primary.main\">\n\n                    <Grid container item direction=\"column\" spacing={3}>\n\n                      <Grid container item direction=\"column\" spacing={0}>\n\n                      <Grid item container justify=\"center\" alignItems=\"center\">\n                          <Typography style={{ marginRight: 30, marginLeft: 30 }}>\n                              <b>Current Location:</b><br/>\n                              {this.props.locations[this.props.selected]['address']}\n                          </Typography>\n                      </Grid>\n\n                      <Grid item container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item>\n                          <LocationPicker\n                            namespace='CSF-GDDTOOL'\n                            locations={this.props.locations}\n                            selected={this.props.selected}\n                            handleOutput={this.props.onchange_locationPicker}\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            variant={this.props.view==='summary' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                            disabled={true}\n                            onClick={() => this.props.onchange_view('summary')}\n                          >\n                            Summary\n                          </Button>\n                        </Grid>\n                      </Grid>\n\n                      </Grid>\n\n                      <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                        <Grid item>\n                          <PlantingDatePicker\n                            value={this.props.locations[this.props.selected]['planting_date']}\n                            onchange={this.props.onchange_plantingDate}\n                          />\n                        </Grid>\n\n                        <Grid item>\n                          <GddBaseSelect\n                            value={this.props.locations[this.props.selected]['gdd_base']}\n                            values={this.props.gdd_list}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n\n                        <Grid item container direction=\"row\" justify=\"center\" alignItems=\"flex-end\">\n                          <GddTargetSelectEnable\n                            value={this.props.targetIsEnabled}\n                            onchange={this.props.onchange_targetIsEnabled}\n                          />\n                          <GddTargetSelect\n                            value={this.props.locations[this.props.selected]['gdd_target']}\n                            enabled={this.props.targetIsEnabled}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n\n                        <Grid item container direction=\"row\" justify=\"center\" alignItems=\"flex-end\">\n                          <FreezeThreshSelectEnable\n                            value={this.props.freezeIsEnabled}\n                            onchange={this.props.onchange_freezeIsEnabled}\n                          />\n                          <FreezeThreshSelect\n                            value={this.props.locations[this.props.selected]['freeze_threshold']}\n                            enabled={this.props.freezeIsEnabled}\n                            onchange={this.props.onchange_locInfo}\n                          />\n                        </Grid>\n                      </Grid>\n\n                    </Grid>\n\n      </Box>\n    );\n  }\n}\n\nUserInput.propTypes = {\n  locations: PropTypes.object.isRequired,\n  selected: PropTypes.string.isRequired,\n  view: PropTypes.string.isRequired,\n  targetIsEnabled: PropTypes.bool.isRequired,\n  freezeIsEnabled: PropTypes.bool.isRequired,\n  gdd_list: PropTypes.array.isRequired,\n  onchange_locationPicker: PropTypes.func.isRequired,\n  onchange_view: PropTypes.func.isRequired,\n  onchange_plantingDate: PropTypes.func.isRequired,\n  onchange_locInfo: PropTypes.func.isRequired,\n  onchange_targetIsEnabled: PropTypes.func.isRequired,\n  onchange_freezeIsEnabled: PropTypes.func.isRequired,\n};\n\nexport default UserInput;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\n\nconst styles = theme => ({\n  typography: {\n    //margin: theme.spacing.unit * 2,\n    margin: theme.spacing(2),\n  },\n});\n\nclass VarPopover extends React.Component {\n  state = {\n    anchorEl: null,\n  };\n\n  handleClick = event => {\n    this.setState({\n      anchorEl: event.currentTarget,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      anchorEl: null,\n    });\n  };\n\n  render() {\n    const { anchorEl } = this.state;\n    const open = Boolean(anchorEl);\n\n    return (\n      <div>\n        <Button\n          variant=\"text\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={this.handleClick}\n        >\n          <ExpandMore />\n          Select chart details\n        </Button>\n        <Popover\n          id=\"simple-popper\"\n          open={open}\n          anchorEl={anchorEl}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'left',\n          }}\n        >\n          {this.props.content}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nVarPopover.propTypes = {\n  content: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(VarPopover);\n","///\n///\n\nimport moment from 'moment';\n\nfunction getSelectedYearData(data,plantingDate) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var dataFiltered = null;\n    var dates_selected_year = null;\n    var gdd_ytd_selected = null;\n    var miss = -999;\n\n    // data arrays for selected year\n    function isWithinThisYear(value,index,array){\n        return (value[0].split('-')[0]===selectedYear && plantingDateFormatted<=value[0])\n    }\n    dataFiltered = data.filter(isWithinThisYear);\n    dates_selected_year = dataFiltered.map(x => x[0]);\n    gdd_ytd_selected = dataFiltered.map(x => x[1]!==miss ? x[1] : null);\n\n    return {\n        'dates_selected_year': dates_selected_year,\n        'gdd_ytd_selected': gdd_ytd_selected,\n    }\n}\n\nfunction getExtremesAndAverageData(data,plantingDate) {\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var currentYear = moment().format('YYYY')\n    let isLeapYearSelected = moment([selectedYear]).isLeapYear()\n    var dataFiltered = null;\n    var distinctDates = null;\n    var dates_for_summary = [];\n    var gdd_ytd_por_max = [];\n    var gdd_ytd_por_min = [];\n    var gdd_ytd_15yr_ave = [];\n    var gdd_ytd_30yr_nor = [];\n\n    let average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\n    function isAfterPlantingDateInHistoricalYears(value,index,array){\n        let isNotCurrentYear = value[0].split('-')[0]!==currentYear\n        let isAfterPlantingDate = plantingDateFormatted.slice(5)<=value[0].slice(5)\n        return (isNotCurrentYear && isAfterPlantingDate)\n    }\n    dataFiltered = data.filter(isAfterPlantingDateInHistoricalYears);\n    distinctDates = [...new Set(dataFiltered.map(x => x[0].slice(5)))]\n    distinctDates.sort()\n\n    function isOnDate(value,index,array){\n        return (value[0].slice(5)===this)\n    }\n    distinctDates.forEach((d) => {\n        if (d==='02-29' && !isLeapYearSelected) { return }\n        let dataForDate = dataFiltered.filter(isOnDate,d);\n        let dataToSummarizeForDate = dataForDate.map(x => x[1])\n        dates_for_summary.push(selectedYear+'-'+d)\n        gdd_ytd_por_max.push(Math.max(...dataToSummarizeForDate))\n        gdd_ytd_por_min.push(Math.min(...dataToSummarizeForDate))\n        gdd_ytd_15yr_ave.push(average(dataToSummarizeForDate.slice(-15)))\n        gdd_ytd_30yr_nor.push(average(dataToSummarizeForDate.slice(1991-parseInt(currentYear,10), 2020-parseInt(currentYear,10))))\n    })\n\n    return {\n        'dates_for_summary': dates_for_summary,\n        'gdd_ytd_por_max': gdd_ytd_por_max,\n        'gdd_ytd_por_min': gdd_ytd_por_min,\n        'gdd_ytd_15yr_ave': gdd_ytd_15yr_ave,\n        'gdd_ytd_30yr_nor': gdd_ytd_30yr_nor,\n    }\n}\n\nfunction getFreezeData(data,plantingDate,freezeThreshold) {\n    //\n    //\n\n    if (!freezeThreshold) {\n      return {\n        'datesOfFirstFreeze_15yr':[],\n        'datesOfLastFreeze_15yr':[],\n      }\n    }\n\n    //var plantingDateFormatted = plantingDate.slice(6,10)+'-'+plantingDate.slice(0,2)+'-'+plantingDate.slice(3,5);\n    var selectedYear = plantingDate.slice(6,10);\n    var currentYear = moment().format('YYYY')\n    //var dataFiltered = null;\n    //let datesOfFirstFreeze_15yr = [\"2022-10-29\", \"2022-10-07\", \"2022-10-12\", \"2022-10-10\", \"2022-10-06\", \"2022-10-09\", \"2022-09-17\", \"2022-10-12\", \"2022-10-18\", \"2022-10-11\", \"2022-10-01\", \"2022-10-16\", \"2022-10-05\", \"2022-09-19\", \"2022-11-04\"]\n    //let datesOfLastFreeze_15yr = [\"2022-04-24\", \"2022-05-01\", \"2022-05-01\", \"2022-05-02\", \"2022-05-06\", \"2022-05-08\", \"2022-05-10\", \"2022-05-12\", \"2022-05-12\", \"2022-05-12\", \"2022-05-15\", \"2022-05-15\", \"2022-05-20\", \"2022-05-23\", \"2022-05-24\"]\n    let years = []\n    let seasonStartDates\n    let datesOfFirstFreeze_15yr = []\n    let datesOfLastFreeze_15yr = []\n\n    let dates = data.map(x => x[0])\n\n    // find last 15 years before current year\n    for (let i = 1; i < 16; i++) {\n      years.push(parseInt(currentYear,10)-i)\n    }\n\n    // season start dates\n    // Each year, we will find the last frost in Spring before this date, and the first frost in Fall after this date.\n    seasonStartDates = years.map(x => x.toString()+'-06-30')\n    seasonStartDates.sort()\n\n    // find first/last freezes\n    function isBelowFreezeThreshold(value,index,array){\n        return value[2]<=parseInt(freezeThreshold,10)\n    }\n    let idxOfDate\n    let springFreezes\n    let fallFreezes\n    seasonStartDates.forEach((d) => {\n      idxOfDate = dates.indexOf(d)\n      // get last freeze in Spring\n      springFreezes = data.slice(idxOfDate-180,idxOfDate).filter(isBelowFreezeThreshold)\n      if (springFreezes.length>0) {\n          datesOfLastFreeze_15yr.push(springFreezes.slice(-1)[0][0])\n      } else {\n          datesOfLastFreeze_15yr = []\n      }\n      // get first freeze in Fall\n      fallFreezes = data.slice(idxOfDate,idxOfDate+180).filter(isBelowFreezeThreshold)\n      if (fallFreezes.length>0) {\n          datesOfFirstFreeze_15yr.push(fallFreezes[0][0])\n      } else {\n          datesOfFirstFreeze_15yr = []\n      }\n    })\n\n    // only include data on or after planting date\n\n    // change years to selected year, for highcharts display\n    datesOfFirstFreeze_15yr = datesOfFirstFreeze_15yr.map(x => selectedYear+x.slice(4))\n    datesOfLastFreeze_15yr = datesOfLastFreeze_15yr.map(x => selectedYear+x.slice(4))\n\n    // highcharts prefers working with sorted data\n    if (datesOfFirstFreeze_15yr.length>0) { datesOfFirstFreeze_15yr.sort() };\n    if (datesOfLastFreeze_15yr.length>0) { datesOfLastFreeze_15yr.sort() };\n\n    return {\n        'datesOfFirstFreeze_15yr':datesOfFirstFreeze_15yr,\n        'datesOfLastFreeze_15yr':datesOfLastFreeze_15yr,\n    }\n}\n\nexport function processWeatherData(data,plantingDate,freezeThreshold) {\n\n    // ------------------------------------------------------------------------\n    //\n    //\n    //\n    // ------------------------------------------------------------------------\n\n    var results = {}\n\n    //console.log(plantingDate)\n    //console.log(data)\n\n    results = {\n        ...results,\n        ...getSelectedYearData(data,plantingDate),\n        ...getExtremesAndAverageData(data,plantingDate),\n        ...getFreezeData(data,plantingDate,freezeThreshold),\n     }\n\n    //if (freezeThreshold) {\n    //  results = {\n    //    ...results,\n    //    ...getFreezeData(data,plantingDate,freezeThreshold),\n    //  }\n    //}\n\n    return results\n    //return {\n    //    'dates_selected_year':,\n    //    'gdd_ytd_selected':,\n    //    'gdd_ytd_15yr_ave':,\n    //    'gdd_ytd_30yr_nor':,\n    //    'gdd_ytd_por_max':,\n    //    'gdd_ytd_por_min':,\n    //    'datesOfLastFreeze_15yr':,\n    //    'datesOfFirstFreeze_15yr':,\n    //    'firstFcstDate':,\n    //    'gdd_fcst_15yr_max':,\n    //    'gdd_fcst_15yr_min':,\n    //    'gdd_fcst_15yr_ave':,\n    //};\n\n}\n\n","///////////////////////////////////////////////////////////////////////////////\n//\n// Climate Smart Farming Growing Degree Day Calculator\n// Copyright (c) 2018 Cornell Institute for Climate Smart Solutions\n// All Rights Reserved\n//\n// This software is published under the provisions of the GNU General Public\n// License <http://www.gnu.org/licenses/>. A text copy of the license can be\n// found in the file 'LICENSE' included with this software.\n//\n// A text copy of the copyright notice, licensing conditions and disclaimers\n// is available in the file 'COPYRIGHT' included with this software.\n//\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport ls from 'local-storage';\n\n// Components\nimport LoadPointData from './LoadPointData';\nimport DisplayChart from './DisplayChart';\nimport UserInput from './UI/UserInput';\nimport VarPopover from './VarPopover';\n\nimport { processWeatherData } from './processWeatherData';\n\nclass ToolContents extends Component {\n\n    constructor(props) {\n        super(props);\n        this.gdd_list = ['86/50','50','49','48','47','46','45','44','43','42','41','40',\n          '39','38','37','36','35','34','33','32']\n        this.defaultLocation = {\n          \"address\":\"Cornell University, Ithaca, NY\",\n          \"lat\":42.45,\n          \"lng\":-76.48,\n          \"id\":\"default\",\n          \"planting_date\":\"01/01/2022\",\n          \"gdd_base\":\"50\",\n          \"gdd_target\":\"1500\",\n          \"freeze_threshold\":\"32\",\n        }\n        this.defaultLocations = {\n          'default':this.defaultLocation\n        }\n        this.state = {\n          locations: ls('CSF-GDDTOOL.locations') || this.defaultLocations,\n          selected: ls('CSF-GDDTOOL.selected') || this.defaultLocation['id'],\n          pointData: null,\n          dataIsLoading: false,\n          targetIsEnabled: false,\n          freezeIsEnabled: false,\n          // view options: 'season-outlook', 'season-to-date', 'climate-change', 'summary'\n          view: 'season-outlook'\n        }\n    }\n\n    componentDidMount() {\n        // Find all data for a given location\n        if ((this.state.locations && this.state.selected)) {\n          this.handleDataIsLoadingChange(true)\n          setTimeout(() => {\n            LoadPointData({param:this.getAcisParamsGDD()})\n              .then(response => {\n                this.handleDataChange(response)\n                this.handleDataIsLoadingChange(false)\n              })\n            },\n            1000\n          );\n        }\n    }\n\n    componentDidUpdate(prevProps,prevState) {\n        if (prevState.selected!==this.state.selected ||\n            prevState.locations[prevState.selected]['planting_date']!==this.state.locations[this.state.selected]['planting_date'] ||\n            prevState.locations[prevState.selected]['gdd_base']!==this.state.locations[this.state.selected]['gdd_base']) {\n          this.handleDataIsLoadingChange(true)\n          setTimeout(() => {\n            LoadPointData({param:this.getAcisParamsGDD()})\n              .then(response => {\n                this.handleDataChange(response)\n                this.handleDataIsLoadingChange(false)\n              })\n            },\n            1000\n          );\n        }\n        if (prevState.locations!==this.state.locations) { ls.set('CSF-GDDTOOL.locations',this.state.locations) }\n        if (prevState.selected!==this.state.selected) { ls.set('CSF-GDDTOOL.selected',this.state.selected) }\n    }\n\n    getAcisParamsGDD = () => {\n          return {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              \"loc\":[this.state.locations[this.state.selected]['lng'],this.state.locations[this.state.selected]['lat']].join(),\n              \"sdate\":\"1980-01-01\",\n              \"edate\":moment().format(\"YYYY-MM-DD\"),\n              \"grid\":\"nrcc-model\",\n              \"elems\":[\n                {\n                 \"name\":\"gdd\",\n                 \"base\":this.state.locations[this.state.selected]['gdd_base']==='86/50' ? 50 : parseInt(this.state.locations[this.state.selected]['gdd_base'],10),\n                 \"limit\":this.state.locations[this.state.selected]['gdd_base']==='86/50' ? [86,50] : [1000,-1000],\n                 \"interval\":[0,0,1],\n                 \"duration\":\"std\",\n                 \"season_start\":[parseInt(this.state.locations[this.state.selected]['planting_date'].slice(0,2),10),parseInt(this.state.locations[this.state.selected]['planting_date'].slice(3,5),10)],\n                 \"reduce\":\"sum\",\n                 \"maxmissing\":\"0\"\n                },\n                {\n                 \"name\":\"mint\",\n                 \"interval\":[0,0,1]\n                }\n              ]})\n          };\n    }\n\n    handleSelectedLocationChange = (v) => {\n        this.setState({\n          selected: v\n        })\n    }\n\n    handleLocationInfoChange = (e) => {\n        let k = e.target.name\n        let v = e.target.value\n        this.setState(prevState => ({\n          ...prevState,\n          locations : {\n              ...prevState.locations, ...{[prevState.selected] : {...prevState.locations[prevState.selected], [k]: v} }\n          }\n        }) )\n    }\n\n    handleLocationPickerOutput = (l,s) => {\n        // include additional items for each location (items like gdd_base, gdd_target, freeze_threshold, planting_date)\n        let l_new = {}\n        for (let k in l) {\n          if (l.hasOwnProperty(k)) {\n            if (this.state.locations.hasOwnProperty(k)) {\n              l_new[k] = { ...this.defaultLocation, ...this.state.locations[k], ...l[k] }\n            } else {\n              l_new[k] = { ...this.defaultLocation, ...l[k] }\n            }\n          }\n        }\n        this.setState({\n          locations: l_new,\n          selected: s['id']\n        })\n    }\n\n    handleDataChange = (d) => {\n        this.setState({\n          pointData: d\n        })\n    }\n\n    handleViewChange = (v) => {\n        this.setState({\n          view: v\n        })\n    }\n\n    handleDataIsLoadingChange = (b) => {\n        this.setState({\n          dataIsLoading: b\n        })\n    }\n\n    handlePlantingDateChange = (...e) => {\n        // put data in format expected, then pass to handleLocationInfoChange\n        let e_new = { 'target': {'name':'planting_date', 'value':e[1]} }\n        this.handleLocationInfoChange(e_new)\n    }\n\n    handleTargetIsEnabledChange = () => {\n        this.setState(prevState => ({\n          targetIsEnabled: !prevState.targetIsEnabled\n        }) )\n    }\n\n    handleFreezeIsEnabledChange = () => {\n        this.setState(prevState => ({\n          freezeIsEnabled: !prevState.freezeIsEnabled\n        }) )\n    }\n\n    render() {\n\n        let display_DisplayChart;\n        let display_UserInput;\n        let display_VarPopover;\n        if (this.state.pointData) {\n            display_DisplayChart = <DisplayChart\n                        locInfo={this.state.locations[this.state.selected]}\n                        freezeIsEnabled={this.state.freezeIsEnabled}\n                        targetIsEnabled={this.state.targetIsEnabled}\n                        chartWeatherData={\n                          processWeatherData(this.state.pointData['data'],\n                          this.state.locations[this.state.selected]['planting_date'],\n                          this.state.locations[this.state.selected]['freeze_threshold'])\n                        }\n                        view={this.state.view}\n                        dataIsLoading={this.state.dataIsLoading}\n                      />\n        }\n\n        display_UserInput = <UserInput\n                                  locations={this.state.locations}\n                                  selected={this.state.selected}\n                                  view={this.state.view}\n                                  targetIsEnabled={this.state.targetIsEnabled}\n                                  freezeIsEnabled={this.state.freezeIsEnabled}\n                                  gdd_list={this.gdd_list}\n                                  onchange_locationPicker={this.handleLocationPickerOutput}\n                                  onchange_view={this.handleViewChange}\n                                  onchange_plantingDate={this.handlePlantingDateChange}\n                                  onchange_locInfo={this.handleLocationInfoChange}\n                                  onchange_targetIsEnabled={this.handleTargetIsEnabledChange}\n                                  onchange_freezeIsEnabled={this.handleFreezeIsEnabledChange}\n                                />\n\n        display_VarPopover = <VarPopover content={display_UserInput} />;\n\n        return (\n            <>\n\n                <Grid container direction=\"row\" justify=\"stretch\" spacing={0}>\n\n                  <Grid item container direction=\"column\" justify=\"top\" alignItems=\"center\" spacing={1} md>\n                    <Hidden mdUp>\n                      {display_VarPopover}\n                    </Hidden>\n                    <Hidden smDown>\n                      {display_UserInput}\n                    </Hidden>\n                  </Grid>\n\n                  <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1} md={9}>\n                      <Grid item style={{width:'100%', height:'70vh'}}>\n                        {this.state.pointData && display_DisplayChart}\n                      </Grid>\n                      <Grid item container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item>\n                          {this.state.pointData && \n                            <Button\n                              variant={this.state.view==='season-to-date' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                              onClick={() => this.handleViewChange('season-to-date')}\n                            >\n                              Season To Date\n                            </Button>\n                          }\n                        </Grid>\n\n                        <Grid item>\n                          {this.state.pointData && \n                            <Button\n                              variant={this.state.view==='season-outlook' ? \"contained\" : \"outlined\"} color=\"primary\" size=\"small\"\n                              onClick={() => this.handleViewChange('season-outlook')}\n                            >\n                              Season Outlook\n                            </Button>\n                          }\n                        </Grid>\n                      </Grid>\n                  </Grid>\n\n                </Grid>\n\n\n                <div className=\"csftool-location-dialog\">\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ToolContents;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\n//import { inject, observer} from 'mobx-react';\nimport { MuiThemeProvider, createMuiTheme, withStyles, withTheme  } from \"@material-ui/core/styles\";\nimport green from '@material-ui/core/colors/green';\n\n// Components\nimport ToolContents from '../components/ToolContents'\n\n// Styles\n//import '../styles/App.css'\n\nconst theme = createMuiTheme({\n  //shadows: [\"none\"],\n  shadows: Array(25).fill('none'),\n  palette: {\n    primary: {\n        main: green[800]\n    },\n    alternativeTextColor: green[800],\n  },\n  overrides: {\n    MUIDataTableBodyRow: {\n      root: {\n        '&:nth-child(odd)': {\n          backgroundColor: '#D3D3D3'\n        }\n      }\n    },\n  },\n  typography: {\n    body2: {\n      fontSize: '0.8rem',\n      '@media (min-width:960px)': {\n        fontSize: '1.0rem',\n      },\n    },\n  }\n});\n\nconst styles = theme => ({\n  root: {},\n});\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <MuiThemeProvider theme={theme}>\n              <div id=\"container\" className=\"App\">\n                  <ToolContents />\n              </div>\n            </MuiThemeProvider>\n        );\n\n    }\n}\n\nexport default withStyles(styles)(withTheme(App));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import reportWebVitals from './reportWebVitals';\n\n//Components\nimport App from './components/App';\n\n//Styles\n//import './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('csftool-content')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}